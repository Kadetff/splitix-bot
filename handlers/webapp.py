import json
import logging
from aiogram import Router, F, Bot
from aiogram.types import Message, InlineQueryResultArticle, InputTextMessageContent

logger = logging.getLogger(__name__)
if not logger.handlers:
    handler = logging.StreamHandler()
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    handler.setFormatter(formatter)
    logger.addHandler(handler)
logger.setLevel(logging.DEBUG)
logger.propagate = False

router = Router()

@router.message(F.web_app_data)
async def handle_webapp_data_specific_filter(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–ø—É—Å–∫ –∫–∞–∫ –∏–∑ Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —Ç–∞–∫ –∏ –∏–∑ Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    logger.critical("!!!! WEBAPP DATA RECEIVED !!!!")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞ WebApp –¥–∞–Ω–Ω—ã—Ö
    source_type = "Unknown"
    if message.reply_to_message:
        source_type = "Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"
    elif hasattr(message, 'via_bot') and message.via_bot:
        source_type = "Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (—á–µ—Ä–µ–∑ answerWebAppQuery)"
    else:
        source_type = "Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"
    
    logger.critical(f"!!!! –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {source_type} !!!!")
    
    if message.web_app_data and message.web_app_data.data:
        logger.critical(f"!!!! WebApp Data: {message.web_app_data.data} !!!!")
        logger.critical(f"!!!! Full message: {message.model_dump_json(indent=2)} !!!!")
        
        raw_data = message.web_app_data.data
        logger.critical(f"!!!! RAW DATA: '{raw_data}' !!!!")
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ = "–ü—Ä–∏–≤–µ—Ç", —ç—Ç–æ –Ω–∞—à –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
        if raw_data.strip() == "–ü—Ä–∏–≤–µ—Ç":
            logger.critical(f"!!!! –£–°–ü–ï–•! –ü–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{raw_data}' !!!!")
            response = f"üéâ **–£–°–ü–ï–•!** –ë–æ—Ç –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç WebApp!\n\n"
            response += f"üì± **–ò—Å—Ç–æ—á–Ω–∏–∫**: {source_type}\n"
            response += f"üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ**: `{raw_data}`\n"
            response += f"‚è∞ **–í—Ä–µ–º—è**: {message.date.strftime('%H:%M:%S')}"
            
            await message.answer(response, parse_mode="Markdown")
            return
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        query_id = None
        try:
            data = json.loads(raw_data)
            query_id = data.get('query_id') 
            logger.info(f"Parsed web_app_data: {data}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            response = f"‚úÖ **–î–∞–Ω–Ω—ã–µ –æ—Ç WebApp –ø–æ–ª—É—á–µ–Ω—ã!**\n\n"
            response += f"üì± **–ò—Å—Ç–æ—á–Ω–∏–∫**: {source_type}\n"
            response += f"üî¢ **Query ID**: `{query_id or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
            selected_items = data.get('selected_items', {})
            if selected_items:
                response += f"üìä **–í—ã–±—Ä–∞–Ω–æ –ø–æ–∑–∏—Ü–∏–π**: {len(selected_items)}\n"
                response += f"üìù **–î–µ—Ç–∞–ª–∏ –≤—ã–±–æ—Ä–∞**: `{selected_items}`\n"
            
            response += f"\nüìÑ **–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ**: ```json\n{json.dumps(data, ensure_ascii=False, indent=2)}\n```"

            # –î–ª—è Reply-–∫–Ω–æ–ø–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å query_id –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            if query_id and source_type == "Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞":
                logger.info(f"Attempting to answer WebApp query_id: {query_id}")
                await message.bot.answer_web_app_query(
                    web_app_query_id=query_id,
                    result=InlineQueryResultArticle(
                        id=str(query_id), 
                        title="–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –±–æ—Ç–æ–º",
                        input_message_content=InputTextMessageContent(
                            message_text=f"‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp (–∏—Å—Ç–æ—á–Ω–∏–∫: {source_type})"
                        )
                    )
                )
                logger.info(f"Successfully called answer_web_app_query for query_id: {query_id}")
                response += f"\nüîÑ **–°—Ç–∞—Ç—É—Å**: WebApp query –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
            else:
                response += f"\n‚ö†Ô∏è **–°—Ç–∞—Ç—É—Å**: {'query_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if not query_id else 'Inline-–∏—Å—Ç–æ—á–Ω–∏–∫, answerWebAppQuery —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω'}"
                
            await message.answer(response, parse_mode="Markdown")
                
        except json.JSONDecodeError:
            logger.error(f"!!!! JSONDecodeError parsing web_app_data: '{raw_data}' !!!!")
            response = f"üìù **–¢–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp**\n\n"
            response += f"üì± **–ò—Å—Ç–æ—á–Ω–∏–∫**: {source_type}\n"
            response += f"üí¨ **–°–æ–¥–µ—Ä–∂–∏–º–æ–µ**: `{raw_data}`\n"
            response += f"‚ö†Ô∏è **–§–æ—Ä–º–∞—Ç**: –ù–µ JSON"
            
            await message.answer(response, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"!!!! Unexpected error processing web_app_data: {e} !!!!", exc_info=True)
            response = f"‚ùå **–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebApp –¥–∞–Ω–Ω—ã—Ö**\n\n"
            response += f"üì± **–ò—Å—Ç–æ—á–Ω–∏–∫**: {source_type}\n"
            response += f"üö´ **–û—à–∏–±–∫–∞**: `{str(e)}`"
            
            await message.answer(response, parse_mode="Markdown")
            
    else:
        # –≠—Ç–∞ –≤–µ—Ç–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ —Ñ–∏–ª—å—Ç—Ä–∞ F.web_app_data
        logger.error("!!!! F.web_app_data triggered, but web_app_data is missing !!!!")

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ webapp —Ä–æ—É—Ç–µ—Ä–µ
@router.message()
async def handle_all_messages_webapp_router(message: Message):
    """
    Fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–µ –ø–æ–π–º–∞–Ω–Ω—ã—Ö –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º.
    """
    logger.critical(f"!!!! WEBAPP_ROUTER FALLBACK !!!! content_type: {message.content_type}")
    logger.critical(f"!!!! Message data: {message.model_dump_json(indent=2)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ web_app_data –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    if hasattr(message, 'web_app_data') and message.web_app_data:
        logger.critical(f"!!!! FOUND web_app_data in fallback !!!! data: {message.web_app_data.data}")
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await handle_webapp_data_specific_filter(message)
    else:
        logger.critical(f"!!!! NO web_app_data in fallback !!!!") 