import asyncio
import logging
import os
from typing import Any
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.types import BotCommand
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from config.settings import TELEGRAM_BOT_TOKEN, LOG_LEVEL
from handlers import photo, callbacks, commands, webapp, inline

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.DEBUG if LOG_LEVEL == "DEBUG" else logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (items –∏ –∏—Ö —Å—á–µ—Ç—á–∏–∫–∏) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
message_states: dict[int, dict[str, Any]] = {}

# –≠–∫—Å–ø–æ—Ä—Ç message_states –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
callbacks.message_states = message_states
photo.message_states = message_states

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è webhook
HEROKU_APP_NAME = os.getenv('HEROKU_APP_NAME', 'splitix-bot-69642ff6c071')
WEBHOOK_HOST = f"https://{HEROKU_APP_NAME}.herokuapp.com"
WEBHOOK_PATH = f"/bot/{TELEGRAM_BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

async def on_startup(bot: Bot) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ."""
    logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook: {WEBHOOK_URL}")
    await bot.set_webhook(
        url=WEBHOOK_URL,
        allowed_updates=["message", "callback_query", "inline_query", "chosen_inline_result"]
    )
    logger.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")

async def on_shutdown(bot: Bot) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ webhook –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ."""
    logger.info("–£–¥–∞–ª–µ–Ω–∏–µ webhook...")
    await bot.delete_webhook()
    logger.info("Webhook —É–¥–∞–ª–µ–Ω")

async def create_bot_app():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞."""
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ webhook —Ä–µ–∂–∏–º–µ...")
    logger.info(f"–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {LOG_LEVEL}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    storage = MemoryStorage()
    bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher(storage=storage)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    await register_commands(bot)
    
    # –ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –í–°–ï–• –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    @dp.update.outer_middleware()
    async def raw_update_logger(handler, event, data):
        logger.critical(f"!!!! RAW UPDATE RECEIVED BY DISPATCHER !!!! Type: {type(event)}")
        logger.critical(f"Raw event data: {event.model_dump_json(indent=2) if hasattr(event, 'model_dump_json') else str(event)}")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
        if hasattr(event, 'message') and event.message:
            msg = event.message
            logger.critical(f"!!!! MESSAGE DETAILS !!!! content_type: {msg.content_type}")
            if hasattr(msg, 'web_app_data') and msg.web_app_data:
                logger.critical(f"!!!! WEB_APP_DATA FOUND !!!! data: {msg.web_app_data.data}")
            else:
                logger.critical(f"!!!! NO WEB_APP_DATA in message !!!!")
        
        return await handler(event, data)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–í–ê–ñ–ù–û: –ø–æ—Ä—è–¥–æ–∫ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ!)
    dp.include_router(commands.router)    # –ö–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–≤—ã–º–∏
    dp.include_router(callbacks.router)   # Callback-–∫–Ω–æ–ø–∫–∏
    dp.include_router(photo.router)       # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    dp.include_router(inline.router)      # Inline-—Ä–µ–∂–∏–º
    dp.include_router(webapp.router)      # WebApp (—Å fallback) - –ü–û–°–õ–ï–î–ù–ò–ú!
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö—É–∫–æ–≤
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è webhook
    app = web.Application()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook handler
    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
    )
    webhook_requests_handler.register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)
    
    logger.info("Bot webhook —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤")
    return app

async def register_commands(bot: Bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–µ–Ω—é."""
    commands = [
        BotCommand(command="start", description="üëã –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"),
        BotCommand(command="split", description="üìá –†–∞–∑–¥–µ–ª–∏—Ç—å —á–µ–∫ (–≤ –≥—Ä—É–ø–ø–µ)"),
        BotCommand(command="testwebapp", description="üß™ –¢–µ—Å—Ç–æ–≤—ã–π WebApp")
    ]
    await bot.set_my_commands(commands)
    logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

if __name__ == "__main__":
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    port = int(os.environ.get('PORT', 8080))
    
    logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ webhook —Ä–µ–∂–∏–º–µ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    web.run_app(
        create_bot_app(),
        host='0.0.0.0',
        port=port
    ) 