import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from handlers.photo import ReceiptStates
from utils.calculations import calculate_total_with_charges
from utils.formatters import format_user_summary, format_final_summary
from utils.state import message_state

logger = logging.getLogger(__name__)
router = Router()

@router.callback_query(F.data == "confirm_selection", ReceiptStates.waiting_for_items_selection)
async def handle_confirm_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    try:
        message_id = callback.message.message_id
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state_data = message_state.get_state(message_id)
        if not state_data:
            await callback.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É—Å—Ç–∞—Ä–µ–ª.", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_counts = message_state.get_user_selection(message_id, user_id)
        if not user_counts or not any(user_counts.values()):
            await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä")
            return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
        total_sum, summary = calculate_total_with_charges(
            items=state_data.get("items", []),
            user_counts=user_counts,
            service_charge_percent=state_data.get("service_charge_percent"),
            actual_discount_percent=state_data.get("actual_discount_percent"),
            total_discount_amount=state_data.get("total_discount_amount")
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        username = callback.from_user.username or callback.from_user.first_name
        formatted_summary = format_user_summary(username, state_data["items"], user_counts, total_sum, summary)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if "user_results" not in state_data:
            state_data["user_results"] = {}
        
        state_data["user_results"][user_id] = {
            "summary": formatted_summary,
            "total_sum": float(total_sum),
            "selected_items": {str(idx): count for idx, count in user_counts.items() if count > 0}
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await callback.message.answer(formatted_summary, parse_mode="HTML")
        
        keyboard = InlineKeyboardBuilder()
        keyboard.row(InlineKeyboardButton(
            text="üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ç–æ–≥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
            callback_data="show_all_results"
        ))
        
        await callback.message.answer(
            "‚úÖ –í–∞—à –≤—ã–±–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–π –≤—ã–±–æ—Ä –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ.",
            reply_markup=keyboard.as_markup()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ confirm_selection: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.callback_query(F.data == "show_all_results")
async def handle_show_all_results(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
    try:
        message_id = callback.message.message_id
        state_data = message_state.get_state(message_id)
        
        if not state_data or "user_results" not in state_data:
            await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        usernames = {}
        for user_id in state_data["user_results"].keys():
            user = await callback.bot.get_chat_member(callback.message.chat.id, user_id)
            usernames[user_id] = user.user.username or user.user.first_name
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        summary = format_final_summary(state_data["user_results"], usernames)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await callback.message.answer(summary, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")

@router.callback_query(F.data == "show_instructions")
async def handle_instructions(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞."""
    instructions = """
ü§ñ *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º*

1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/split` –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ
2. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ–∫–∞
3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üåê –û—Ç–∫—Ä—ã—Ç—å –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"
4. –í –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –æ–∫–Ω–µ –æ—Ç–º–µ—Ç—å—Ç–µ —Å–≤–æ–∏ –ø–æ–∑–∏—Ü–∏–∏
5. –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞

*–í –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ:*
- –ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –æ—Ç–º–µ—á–∞–µ—Ç —Å–≤–æ–∏ –ø–æ–∑–∏—Ü–∏–∏ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º
- –ü–æ—Å–ª–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –±–æ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç –≤–∑–∞–∏–º–æ—Ä–∞—Å—á–µ—Ç—ã
"""
    await callback.message.answer(instructions, parse_mode="Markdown")
    await callback.answer() 