import os
import json
import logging
import time
from datetime import datetime
from flask import Flask, request, jsonify, send_file, abort
from flask_cors import CORS

# –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ webapp
webapp_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
frontend_dir = os.path.join(webapp_dir, 'frontend')

app = Flask(__name__, static_folder=os.path.join(frontend_dir, 'static'))
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –£–±—Ä–∞–Ω–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö —á–µ–∫–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
ENVIRONMENT = os.getenv("ENVIRONMENT", "development")
ENABLE_TEST_COMMANDS = os.getenv("ENABLE_TEST_COMMANDS", "true").lower() == "true"

def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –æ—Ç–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    logger.debug("–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è index() - –æ—Ç–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    index_page_path = os.path.join(frontend_dir, 'index.html')
    if os.path.exists(index_page_path):
        return send_file(index_page_path)
    else:
        # Fallback –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        test_page_path = os.path.join(frontend_dir, 'debug', 'test_webapp.html')
        if os.path.exists(test_page_path):
            return send_file(test_page_path)
        else:
            return "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", 404

@app.route('/test_webapp')
@app.route('/test_webapp/')
def test_webapp_page():
    """–û—Ç–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π WebApp (—Ç–æ–ª—å–∫–æ –≤ dev/staging –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if not ENABLE_TEST_COMMANDS:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤ {ENVIRONMENT} –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
        abort(404)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 404 –≤ production
    
    logger.debug("–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è test_webapp_page()")
    test_page_path = os.path.join(frontend_dir, 'debug', 'test_webapp.html')
    
    if os.path.exists(test_page_path):
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_page_path}")
        return send_file(test_page_path)
    else:
        logger.error(f"–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª test_webapp.html –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {test_page_path}")
        return "–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", 404

@app.route('/app/<int:message_id>')
def receipt_app(message_id):
    """–û—Ç–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ–∫–∞"""
    logger.debug(f"–ó–∞–ø—Ä–æ—Å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –¥–ª—è message_id: {message_id}")
    return index()

@app.route('/')
def test_root_handler():
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫–æ—Ä–Ω–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    logger.debug(f"Flask root handler: {request.url}")
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –∫ test_webapp —á–µ—Ä–µ–∑ –∫–æ—Ä–Ω–µ–≤–æ–π handler, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
    if 'test_webapp' in request.url:
        logger.debug("–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º test_webapp –∑–∞–ø—Ä–æ—Å")
        return test_webapp_page()
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –∫ health —á–µ—Ä–µ–∑ –∫–æ—Ä–Ω–µ–≤–æ–π handler, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
    if 'health' in request.url:
        logger.debug("–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º health –∑–∞–ø—Ä–æ—Å")
        return health_check()
    
    # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –æ—Ç–¥–∞–µ–º –æ–±—ã—á–Ω—É—é –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    return index()

@app.route('/health')
@app.route('/health/')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    return jsonify({"status": "ok", "message": "API is running"})

@app.route('/api/receipt/<int:message_id>')
def get_receipt_data(message_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ–∫–∞ –ø–æ message_id"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º message_states –∏–∑ handlers.photo
        from handlers.photo import message_states
        
        if message_id not in message_states:
            logger.warning(f"–î–∞–Ω–Ω—ã–µ —á–µ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è message_id: {message_id}")
            return jsonify({"error": "Receipt data not found"}), 404
        
        receipt_data = message_states[message_id]
        logger.info(f"–û—Ç–¥–∞—é –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞ –¥–ª—è message_id: {message_id}")
        
        return jsonify(receipt_data)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ–∫–∞: {e}")
        return jsonify({"error": "Internal server error"}), 500

@app.route('/api/answer_webapp_query', methods=['POST'])
def answer_webapp_query():
    """API endpoint –¥–ª—è answerWebAppQuery (–¥–ª—è Inline-–∫–Ω–æ–ø–æ–∫)"""
    try:
        if not request.is_json:
            return jsonify({"error": "Expected JSON data"}), 400
            
        data = request.json
        query_id = data.get('query_id')
        result_data = data.get('data', {})
        title = data.get('title', '–î–∞–Ω–Ω—ã–µ –æ—Ç WebApp')
        description = data.get('description', '–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤')
        
        if not query_id:
            return jsonify({"error": "query_id is required"}), 400
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å answerWebAppQuery: query_id={query_id}")
        logger.info(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {result_data}")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ handlers/webapp.py –¥–ª—è –≤—ã–∑–æ–≤–∞ answerWebAppQuery
        try:
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å Telegram Bot API answerWebAppQuery
            # –ù–æ —É –Ω–∞—Å –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ bot –æ–±—ä–µ–∫—Ç—É –∏–∑ Flask
            # –ü–æ—ç—Ç–æ–º—É –º—ã –¥–µ–ª–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å –∫ Telegram API
            
            import requests
            import os
            
            bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
            if not bot_token:
                logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                return jsonify({"error": "Bot token not configured"}), 500
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è answerWebAppQuery
            telegram_data = {
                "web_app_query_id": query_id,
                "result": {
                    "type": "article",
                    "id": str(int(time.time())),
                    "title": title,
                    "description": description,
                    "input_message_content": {
                        "message_text": f"‚úÖ **–í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω**\n\nüì± **–ò—Å—Ç–æ—á–Ω–∏–∫**: Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞\nüìä **–í—ã–±—Ä–∞–Ω–æ –ø–æ–∑–∏—Ü–∏–π**: {len(result_data.get('selected_items', {}))}\n‚è∞ **–í—Ä–µ–º—è**: {datetime.now().strftime('%H:%M:%S')}"
                    }
                }
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Telegram Bot API
            telegram_url = f"https://api.telegram.org/bot{bot_token}/answerWebAppQuery"
            response = requests.post(telegram_url, json=telegram_data, timeout=10)
            
            if response.status_code == 200:
                telegram_result = response.json()
                if telegram_result.get('ok'):
                    logger.info(f"answerWebAppQuery –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è query_id: {query_id}")
                    return jsonify({"success": True, "message": "WebApp query answered successfully"})
                else:
                    error_desc = telegram_result.get('description', 'Unknown error')
                    logger.error(f"Telegram API error: {error_desc}")
                    return jsonify({"error": f"Telegram API error: {error_desc}"}), 500
            else:
                logger.error(f"HTTP error from Telegram API: {response.status_code}")
                return jsonify({"error": f"HTTP error: {response.status_code}"}), 500
                
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Telegram API: {e}")
            return jsonify({"error": f"Request error: {str(e)}"}), 500
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ answerWebAppQuery: {e}")
            return jsonify({"error": f"Unexpected error: {str(e)}"}), 500
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ answer_webapp_query endpoint: {e}")
        return jsonify({"error": str(e)}), 500



if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5001))
    debug_mode = os.environ.get('FLASK_DEBUG', 'False').lower() == 'true'
    app.run(host='0.0.0.0', port=port, debug=debug_mode) 