#!/usr/bin/env python3
"""
–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è Telegram Bot –∏ WebApp –Ω–∞ Heroku.
–ó–∞–ø—É—Å–∫–∞–µ—Ç webhook –¥–ª—è –±–æ—Ç–∞ –∏ Flask –¥–ª—è WebApp –Ω–∞ –æ–¥–Ω–æ–º –ø–æ—Ä—Ç—É.
"""
import asyncio
import logging
import os
import json
import aiohttp
import time
from aiohttp import web
from aiohttp_wsgi import WSGIHandler
from main import create_app

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown"""
    if not isinstance(text, str):
        text = str(text)
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
    # –£–±–∏—Ä–∞–µ–º –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã, —Ç–æ—á–∫–∏ –∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ª–æ–º–∞—é—Ç —Ä–∞–∑–º–µ—Ç–∫—É
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}']
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    
    return text

async def test_answer_webapp_query(request):
    """Endpoint –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Inline WebApp –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ answerWebAppQuery"""
    logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ /api/answer_webapp_query")
    
    try:
        if request.content_type != 'application/json':
            return web.json_response({"error": "Expected JSON data"}, status=400)
            
        data = await request.json()
        query_id = data.get('query_id')
        result_data = data.get('data', {})
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: query_id={query_id}, data={result_data}")
        
        if not query_id:
            return web.json_response({"error": "query_id is required"}, status=400)
        
        # –ü–æ–ª—É—á–∞–µ–º bot token
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not bot_token:
            logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return web.json_response({"error": "Bot token not configured"}, status=500)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        payload = result_data.get('payload', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
        button_type = result_data.get('button_type', 'inline')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó Markdown –¥–ª—è Inline-–∫–Ω–æ–ø–æ–∫ (–∏–∑–±–µ–≥–∞–µ–º –ø—Ä–æ–±–ª–µ–º —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º)
        if isinstance(payload, str) and payload.strip() == "–ü—Ä–∏–≤–µ—Ç":
            message_text = f"üéâ –£–°–ü–ï–•! –ë–æ—Ç –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç WebApp!\n\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {payload}\nüîµ –¢–∏–ø –∫–Ω–æ–ø–∫–∏: Inline\n‚è∞ –í—Ä–µ–º—è: {time.strftime('%H:%M:%S')}"
        else:
            message_text = f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç WebApp –ø–æ–ª—É—á–µ–Ω—ã!\n\nüîµ –¢–∏–ø –∫–Ω–æ–ø–∫–∏: Inline\n"
            
            if isinstance(payload, str):
                message_text += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {payload}\n"
            elif isinstance(payload, dict):
                if 'message' in payload:
                    message_text += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {payload['message']}\n"
                if 'items' in payload:
                    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ –≤—Å—è–∫–æ–π —Ä–∞–∑–º–µ—Ç–∫–∏
                    items_str = str(payload['items'])
                    message_text += f"üì¶ –≠–ª–µ–º–µ–Ω—Ç—ã: {items_str}\n"
                if 'count' in payload:
                    message_text += f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {payload['count']}\n"
            
            message_text += f"‚è∞ –í—Ä–µ–º—è: {time.strftime('%H:%M:%S')}\nüîß –ò—Å—Ç–æ—á–Ω–∏–∫: test_webapp"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è answerWebAppQuery
        telegram_data = {
            "web_app_query_id": query_id,
            "result": {
                "type": "article",
                "id": str(int(time.time())),
                "title": "‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã",
                "description": f"WebApp: {payload if isinstance(payload, str) else 'JSON –¥–∞–Ω–Ω—ã–µ'}",
                "input_message_content": {
                    "message_text": message_text
                    # –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–±–∏—Ä–∞–µ–º parse_mode
                }
            }
        }
        
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –≤ Telegram API: {json.dumps(telegram_data, ensure_ascii=False, indent=2)}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º answerWebAppQuery
        telegram_url = f"https://api.telegram.org/bot{bot_token}/answerWebAppQuery"
        
        async with aiohttp.ClientSession() as session:
            async with session.post(telegram_url, json=telegram_data, timeout=10) as response:
                response_text = await response.text()
                logger.debug(f"Telegram API response: status={response.status}, body={response_text}")
                
                if response.status == 200:
                    telegram_result = await response.json()
                    if telegram_result.get('ok'):
                        logger.info("–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω answerWebAppQuery")
                        return web.json_response({"success": True, "message": "WebApp query answered successfully"})
                    else:
                        error_desc = telegram_result.get('description', 'Unknown error')
                        logger.error(f"Telegram API error: {error_desc}")
                        return web.json_response({"error": f"Telegram API error: {error_desc}"}, status=500)
                else:
                    logger.error(f"HTTP error from Telegram API: {response.status}")
                    logger.error(f"Response body: {response_text}")
                    return web.json_response({"error": f"HTTP error: {response.status}"}, status=500)
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ test_answer_webapp_query: {e}")
        return web.json_response({"error": str(e)}, status=500)

async def init_app():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º
    bot_app = await create_app()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ–π API endpoint –≤ aiohttp
    logger.info("–î–æ–±–∞–≤–ª—è—é API endpoint /api/answer_webapp_query")
    bot_app.router.add_post('/api/answer_webapp_query', test_answer_webapp_query)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    from webapp.backend.server import app as flask_app
    
    # –°–æ–∑–¥–∞–µ–º WSGI handler –¥–ª—è Flask
    wsgi_handler = WSGIHandler(flask_app)
    
    # –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    async def logged_wsgi_handler(request):
        logger.debug(f"WSGI handler: {request.method} {request.path_qs}")
        return await wsgi_handler(request)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è WebApp
    
    # –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ WebApp
    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é —Ä–æ—É—Ç—ã –¥–ª—è /test_webapp")
    bot_app.router.add_route('GET', '/test_webapp{path_info:/?}', logged_wsgi_handler)
    bot_app.router.add_route('GET', '/test_webapp{path_info:/.*}', logged_wsgi_handler)
    
    # API –º–∞—Ä—à—Ä—É—Ç—ã (–æ—Å—Ç–∞–ª—å–Ω—ã–µ API –∫—Ä–æ–º–µ answer_webapp_query)
    bot_app.router.add_route('*', '/api/receipt/{path_info:.*}', logged_wsgi_handler)
    bot_app.router.add_route('*', '/api/selection/{path_info:.*}', logged_wsgi_handler)
    
    # –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
    bot_app.router.add_route('GET', '/health{path_info:.*}', logged_wsgi_handler)
    bot_app.router.add_route('*', '/maintenance/{path_info:.*}', logged_wsgi_handler)
    
    # –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —á–µ–∫–æ–≤ (—á–∏—Å–ª–æ–≤—ã–µ ID)
    bot_app.router.add_route('GET', '/{message_id:[0-9]+}{path_info:.*}', logged_wsgi_handler)
    
    # –ö–æ—Ä–Ω–µ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–¢–û–õ–¨–ö–û –∫–æ—Ä–µ–Ω—å)
    bot_app.router.add_route('GET', '/{path_info:/?}', logged_wsgi_handler)
    
    logger.info("–í—Å–µ —Ä–æ—É—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    logger.info("–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä (Telegram Bot + WebApp) –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
    logger.info(f"Webhook path –∑–∞—â–∏—â–µ–Ω –æ—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ Flask –º–∞—Ä—à—Ä—É—Ç–∞–º–∏")
    return bot_app

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 8000))
    
    logger.info(f"–ó–∞–ø—É—Å–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    logger.info("–í–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è:")
    logger.info("- Telegram Bot (webhook)")
    logger.info("- WebApp (Flask)")
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    web.run_app(
        init_app(),
        host='0.0.0.0',
        port=port
    ) 