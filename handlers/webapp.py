import json
import logging
from aiogram import Router, F, Bot
from aiogram.types import Message, InlineQueryResultArticle, InputTextMessageContent
import html

logger = logging.getLogger(__name__)
if not logger.handlers:
    handler = logging.StreamHandler()
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    handler.setFormatter(formatter)
    logger.addHandler(handler)
logger.setLevel(logging.DEBUG)
logger.propagate = False

router = Router()

def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown"""
    if not isinstance(text, str):
        text = str(text)
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
    # –£–±–∏—Ä–∞–µ–º –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã, —Ç–æ—á–∫–∏ –∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ª–æ–º–∞—é—Ç —Ä–∞–∑–º–µ—Ç–∫—É
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}']
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    
    return text

@router.message(F.web_app_data)
async def handle_webapp_data_specific_filter(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp.
    –°–æ–∑–¥–∞–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–µ–∏—Ö —Ç–∏–ø–æ–≤ –∫–Ω–æ–ø–æ–∫ (Inline –∏ Reply).
    """
    logger.info("–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp")
    
    if message.web_app_data and message.web_app_data.data:
        raw_data = message.web_app_data.data
        logger.info(f"WebApp –¥–∞–Ω–Ω—ã–µ: {raw_data}")
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ = "–ü—Ä–∏–≤–µ—Ç", —ç—Ç–æ –Ω–∞—à –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
        if raw_data.strip() == "–ü—Ä–∏–≤–µ—Ç":
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {raw_data}")
            
            # –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ô –û–¢–í–ï–¢ (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–Ω–æ–ø–æ–∫)
            response = f"üéâ **–£–°–ü–ï–•! –ë–æ—Ç –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç WebApp!**\n\n"
            response += f"üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ**: `{raw_data}`\n"
            response += f"‚è∞ **–í—Ä–µ–º—è**: {message.date.strftime('%H:%M:%S')}"
            
            await message.answer(response, parse_mode="Markdown")
            return
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        try:
            data = json.loads(raw_data)
            logger.info(f"Parsed web_app_data: {data}")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            button_type = data.get('button_type', 'unknown')
            query_id = data.get('query_id')
            payload = data.get('payload')
            source = data.get('source', 'unknown')
            
            logger.info(f"Parsed: button_type={button_type}, source={source}, payload={payload}")

            # –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ô –û–¢–í–ï–¢ (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤)
            response = f"‚úÖ **–î–∞–Ω–Ω—ã–µ –æ—Ç WebApp –ø–æ–ª—É—á–µ–Ω—ã!**\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –±–ª–æ–∫–µ
            if button_type == 'inline':
                response += f"üîµ **–¢–∏–ø –∫–Ω–æ–ø–∫–∏**: Inline\n"
            elif button_type == 'reply':
                response += f"üü¢ **–¢–∏–ø –∫–Ω–æ–ø–∫–∏**: Reply\n"
            else:
                response += f"‚ö™ **–¢–∏–ø –∫–Ω–æ–ø–∫–∏**: {escape_markdown(button_type)}\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            if isinstance(payload, str):
                response += f"üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ**: `{payload}`\n"
            elif isinstance(payload, dict):
                if 'message' in payload:
                    response += f"üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ**: `{payload['message']}`\n"
                if 'items' in payload:
                    # –ú–∞—Å—Å–∏–≤—ã –ë–ï–ó –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞ - —Ç–æ–ª—å–∫–æ –∏–∫–æ–Ω–∫–∞ –∏ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                    items_str = str(payload['items'])
                    response += f"üì¶ **–≠–ª–µ–º–µ–Ω—Ç—ã**: {items_str}\n"
                if 'count' in payload:
                    response += f"üî¢ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ**: `{payload['count']}`\n"
            
            response += f"‚è∞ **–í—Ä–µ–º—è**: {message.date.strftime('%H:%M:%S')}\n"
            response += f"üîß **–ò—Å—Ç–æ—á–Ω–∏–∫**: {escape_markdown(source)}"

            await message.answer(response, parse_mode="Markdown")
                
        except json.JSONDecodeError:
            logger.error(f"JSONDecodeError parsing web_app_data: {raw_data}")
            
            # –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ô –û–¢–í–ï–¢ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            response = f"üìù **–¢–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp**\n\n"
            response += f"üí¨ **–°–æ–¥–µ—Ä–∂–∏–º–æ–µ**: `{raw_data}`\n"
            response += f"‚è∞ **–í—Ä–µ–º—è**: {message.date.strftime('%H:%M:%S')}\n"
            response += f"‚ö†Ô∏è **–§–æ—Ä–º–∞—Ç**: –ù–µ JSON"
            
            await message.answer(response, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"Unexpected error processing web_app_data: {e}", exc_info=True)
            
            # –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ô –û–¢–í–ï–¢ –¥–ª—è –æ—à–∏–±–æ–∫
            response = f"‚ùå **–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebApp –¥–∞–Ω–Ω—ã—Ö**\n\n"
            response += f"üö´ **–û—à–∏–±–∫–∞**: `{str(e)}`\n"
            response += f"‚è∞ **–í—Ä–µ–º—è**: {message.date.strftime('%H:%M:%S')}"
            
            await message.answer(response, parse_mode="Markdown")
            
    else:
        # –≠—Ç–∞ –≤–µ—Ç–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ —Ñ–∏–ª—å—Ç—Ä–∞ F.web_app_data
        logger.error("F.web_app_data triggered, but web_app_data is missing")

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ webapp —Ä–æ—É—Ç–µ—Ä–µ
@router.message()
async def handle_all_messages_webapp_router(message: Message):
    """
    Fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–µ –ø–æ–π–º–∞–Ω–Ω—ã—Ö –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º.
    """
    logger.debug(f"WebApp router fallback: content_type={message.content_type}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ web_app_data –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    if hasattr(message, 'web_app_data') and message.web_app_data:
        logger.info(f"Found web_app_data in fallback: {message.web_app_data.data}")
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await handle_webapp_data_specific_filter(message)
    else:
        logger.debug("No web_app_data in fallback") 