import json
import logging
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from utils.state import message_state
from utils.calculations import calculate_total_with_charges
from utils.formatters import format_user_summary

logger = logging.getLogger(__name__)
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è –Ω–∞ DEBUG
logger.setLevel(logging.DEBUG)
router = Router()

# –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ main.py
message_states = {}

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def handle_all_messages(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –æ—Ç–ª–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp"""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ web_app_data
    if hasattr(message, 'web_app_data') and message.web_app_data:
        logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ WebApp: {message.web_app_data.data}")
        await handle_webapp_data(message, state)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è
    attrs = dir(message)
    logger.debug(f"–ê—Ç—Ä–∏–±—É—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è: {', '.join([a for a in attrs if not a.startswith('_')])}")
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    logger.debug(f"Text: {getattr(message, 'text', 'None')}")
    logger.debug(f"ContentType: {getattr(message, 'content_type', 'None')}")
    logger.debug(f"WebAppData: {getattr(message, 'web_app_data', 'None')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ JSON-–¥–∞–Ω–Ω—ã–µ
    if hasattr(message, 'text') and message.text:
        try:
            data = json.loads(message.text)
            if isinstance(data, dict) and 'messageId' in data and 'selectedItems' in data:
                logger.info(f"–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ WebApp –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text}")
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                class WebAppData:
                    def __init__(self, data):
                        self.data = json.dumps(data)
                message.web_app_data = WebAppData(data)
                await handle_webapp_data(message, state)
                return
        except json.JSONDecodeError:
            pass
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–ø–æ–∑–Ω–∞–Ω–æ –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ WebApp, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")

@router.message(F.web_app_data)
async def handle_webapp_data(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        logger.debug(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö WebApp. –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        webapp_data = None
        if hasattr(message, 'web_app_data') and message.web_app_data:
            webapp_data = message.web_app_data.data
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ web_app_data: {webapp_data}")
        elif hasattr(message, 'text') and message.text:
            try:
                data = json.loads(message.text)
                if isinstance(data, dict) and 'messageId' in data and 'selectedItems' in data:
                    webapp_data = message.text
                    logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ text: {webapp_data}")
            except json.JSONDecodeError:
                pass
        
        if not webapp_data:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        # –ü–∞—Ä—Å–∏–º JSON-–¥–∞–Ω–Ω—ã–µ
        try:
            data = json.loads(webapp_data)
            logger.debug(f"–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
            
        message_id = data.get('messageId')
        selected_items = data.get('selectedItems', {})
        
        if not message_id:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç messageId –≤ –¥–∞–Ω–Ω—ã—Ö")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return
        
        logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è message_id: {message_id}, selected_items: {selected_items}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state_data = message_state.get_state(int(message_id))
        if not state_data:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è message_id: {message_id}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        user_id = message.from_user.id
        logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª—è user_id: {user_id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if 'user_selections' not in state_data:
            state_data['user_selections'] = {}
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è –∫ —Å—Ç—Ä–æ–∫–∞–º –∏ int
        state_data['user_selections'][user_id] = {str(idx): int(count) for idx, count in selected_items.items()}
        
        # –†–∞—Å—á—ë—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        user_counts = state_data['user_selections'][user_id]
        total_sum, summary = calculate_total_with_charges(
            items=state_data.get("items", []),
            user_counts=user_counts,
            service_charge_percent=state_data.get("service_charge_percent"),
            actual_discount_percent=state_data.get("actual_discount_percent"),
            total_discount_amount=state_data.get("total_discount_amount")
        )
        username = message.from_user.username or message.from_user.first_name
        formatted_summary = format_user_summary(username, state_data["items"], user_counts, total_sum, summary)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if "user_results" not in state_data:
            state_data["user_results"] = {}
        state_data["user_results"][user_id] = {
            "summary": formatted_summary,
            "total_sum": float(total_sum),
            "selected_items": {str(idx): count for idx, count in user_counts.items() if count > 0}
        }
        
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è user_id: {user_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
        await message.answer(formatted_summary, parse_mode="HTML")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        keyboard = InlineKeyboardBuilder()
        keyboard.row(InlineKeyboardButton(text="üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ç–æ–≥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="show_all_results"))
        await message.answer(
            "‚úÖ –í–∞—à –≤—ã–±–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–π –≤—ã–±–æ—Ä –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ.",
            reply_markup=keyboard.as_markup()
        )
        
        logger.debug(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ WebApp –¥–ª—è user_id: {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.") 