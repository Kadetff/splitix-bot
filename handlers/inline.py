import logging
from aiogram import Router, F
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent
from uuid import uuid4

logger = logging.getLogger(__name__)
router = Router()

@router.inline_query()
async def process_inline_query(query: InlineQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–æ–≤."""
    logger.info(f"Inline –∑–∞–ø—Ä–æ—Å –æ—Ç {query.from_user.id}: {query.query}")
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    split_id = str(uuid4())
    help_id = str(uuid4())
    about_id = str(uuid4())
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    results = [
        InlineQueryResultArticle(
            id=split_id,
            title="üì∑ –†–∞–∑–¥–µ–ª–∏—Ç—å —á–µ–∫",
            description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ–∫–∞",
            input_message_content=InputTextMessageContent(
                message_text="/split"
            ),
            thumbnail_url="https://img.icons8.com/color/48/000000/split-files.png"
        ),
        InlineQueryResultArticle(
            id=help_id,
            title="‚ùì –ü–æ–º–æ—â—å",
            description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞",
            input_message_content=InputTextMessageContent(
                message_text="/help"
            ),
            thumbnail_url="https://img.icons8.com/color/48/000000/help.png"
        ),
        InlineQueryResultArticle(
            id=about_id,
            title="‚ÑπÔ∏è –û –±–æ—Ç–µ",
            description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —á–µ–∫–æ–≤",
            input_message_content=InputTextMessageContent(
                message_text="*–ë–æ—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —á–µ–∫–æ–≤*\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞, –∏ —è –ø–æ–º–æ–≥—É —Ä–∞–∑–¥–µ–ª–∏—Ç—å –µ–≥–æ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏. "
                "–Ø –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã, —Ü–µ–Ω—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –¥–æ–ª–∏ –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /split –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.",
                parse_mode="Markdown"
            ),
            thumbnail_url="https://img.icons8.com/color/48/000000/info.png"
        )
    ]
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–∞–∫–æ–π-—Ç–æ –∑–∞–ø—Ä–æ—Å, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
    if query.query:
        search_id = str(uuid4())
        results.append(
            InlineQueryResultArticle(
                id=search_id,
                title=f"üîç –ü–æ–∏—Å–∫: {query.query}",
                description="–°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ç–∏–º —Ç–µ–∫—Å—Ç–æ–º",
                input_message_content=InputTextMessageContent(
                    message_text=f"*–†–∞–∑–¥–µ–ª–∏—Ç—å —á–µ–∫*: {query.query}",
                    parse_mode="Markdown"
                )
            )
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await query.answer(results, cache_time=300)  # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç 