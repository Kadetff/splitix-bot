import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from utils.calculations import calculate_total_with_charges
from utils.formatters import format_user_summary, format_final_summary
from utils.state import message_state
from handlers.commands import HELP_TEXT

logger = logging.getLogger(__name__)
router = Router()

@router.callback_query(F.data == "confirm_selection", FSMContext)
async def handle_confirm_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    try:
        message_id = callback.message.message_id
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state_data = message_state.get_state(message_id)
        if not state_data:
            await callback.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É—Å—Ç–∞—Ä–µ–ª.", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_counts = message_state.get_user_selection(message_id, user_id)
        if not user_counts or not any(user_counts.values()):
            await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä")
            return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
        total_sum, summary = calculate_total_with_charges(
            items=state_data.get("items", []),
            user_counts=user_counts,
            service_charge_percent=state_data.get("service_charge_percent"),
            actual_discount_percent=state_data.get("actual_discount_percent"),
            total_discount_amount=state_data.get("total_discount_amount")
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        username = callback.from_user.username or callback.from_user.first_name
        formatted_summary = format_user_summary(username, state_data["items"], user_counts, total_sum, summary)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if "user_results" not in state_data:
            state_data["user_results"] = {}
        
        state_data["user_results"][user_id] = {
            "summary": formatted_summary,
            "total_sum": float(total_sum),
            "selected_items": {str(idx): count for idx, count in user_counts.items() if count > 0}
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await callback.message.answer(formatted_summary, parse_mode="HTML")
        
        keyboard = InlineKeyboardBuilder()
        keyboard.row(InlineKeyboardButton(
            text="üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ç–æ–≥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
            callback_data="show_all_results"
        ))
        
        await callback.message.answer(
            "‚úÖ –í–∞—à –≤—ã–±–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–π –≤—ã–±–æ—Ä –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ.",
            reply_markup=keyboard.as_markup()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ confirm_selection: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.callback_query(F.data == "show_all_results")
async def handle_show_all_results(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
    try:
        message_id = callback.message.message_id
        state_data = message_state.get_state(message_id)
        
        if not state_data or "user_results" not in state_data:
            await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        usernames = {}
        for user_id in state_data["user_results"].keys():
            user = await callback.bot.get_chat_member(callback.message.chat.id, user_id)
            usernames[user_id] = user.user.username or user.user.first_name
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        summary = format_final_summary(state_data["user_results"], usernames)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await callback.message.answer(summary, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")

@router.callback_query(F.data == "show_instructions")
async def handle_instructions(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ (—Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ –∏ /help)."""
    await callback.message.answer(HELP_TEXT)
    await callback.answer()

@router.callback_query(F.data == "webapp_info")
async def handle_webapp_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ WebApp."""
    info_text = (
        "‚ÑπÔ∏è **–û WebApp —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:**\n\n"
        "üß™ **–¢–µ—Å—Ç–æ–≤—ã–π WebApp** –ø–æ–∑–≤–æ–ª—è–µ—Ç:\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å JSON-—Å—Ç—Ä—É–∫—Ç—É—Ä—ã\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–∞–±–æ—Ç—É –æ–±–µ–∏—Ö —Ç–∏–ø–æ–≤ –∫–Ω–æ–ø–æ–∫\n\n"
        "üì± **–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∑–∞–ø—É—Å–∫–∞:**\n"
        "‚Ä¢ **Inline-–∫–Ω–æ–ø–∫–∞** - –∫–Ω–æ–ø–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n"
        "‚Ä¢ **Reply-–∫–Ω–æ–ø–∫–∞** - –∫–Ω–æ–ø–∫–∞ –≤ –Ω–∏–∂–Ω–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ\n\n"
        "üéØ **–ß—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è:**\n"
        "‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–º\n"
        "‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∫–Ω–æ–ø–∫–∏\n"
        "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤\n\n"
        "üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å** –≤ WebApp:\n"
        "‚Ä¢ –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: `–ü—Ä–∏–≤–µ—Ç`\n"
        "‚Ä¢ JSON-–¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–æ–ª—è–º–∏"
    )
    
    await callback.message.answer(info_text, parse_mode="Markdown")
    await callback.answer("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ WebApp")

@router.callback_query(F.data == "webapp_error")
async def handle_webapp_error(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É —Å–æ–∑–¥–∞–Ω–∏—è WebApp –∫–Ω–æ–ø–∫–∏."""
    error_text = (
        "‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebApp –∫–Ω–æ–ø–∫–∏**\n\n"
        "üîß **–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**\n"
        "‚Ä¢ URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n"
        "‚Ä¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL\n"
        "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π\n\n"
        "üõ†Ô∏è **–†–µ—à–µ–Ω–∏–µ:**\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é WEBAPP_URL\n"
        "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Flask-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω\n"
        "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/webhook` –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏\n\n"
        "üìû **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**\n"
        "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
    )
    
    await callback.message.answer(error_text, parse_mode="Markdown")
    await callback.answer("‚ùå –û—à–∏–±–∫–∞ WebApp", show_alert=True) 