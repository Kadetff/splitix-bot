import logging
import os
from aiogram import Router
from aiogram.types import Message, InlineKeyboardButton, WebAppInfo, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from handlers.photo import ReceiptStates
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from config.settings import WEBAPP_URL, TELEGRAM_BOT_TOKEN, ENABLE_TEST_COMMANDS
from utils.keyboards import create_test_webapp_inline_keyboard, create_test_webapp_reply_keyboard

logger = logging.getLogger(__name__)
router = Router()

HELP_TEXT = (
    "üìö –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
    "1. üì∏ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —á–µ–∫–∞\n"
    "2. üîç –Ø —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ç–æ–≤–∞—Ä—ã –∏ —Ü–µ–Ω—ã\n"
    "3. ‚úÖ –í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–≤–æ–π —Å—á–µ—Ç\n"
    "4. üí∞ –Ø –ø–æ—Å—á–∏—Ç–∞—é —Ç–≤–æ—é —á–∞—Å—Ç—å\n\n"
    "üí° –°–æ–≤–µ—Ç—ã:\n"
    "‚Ä¢ –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ñ–æ—Ç–æ —á–µ–∫–∞ —á–µ—Ç–∫–æ–µ –∏ —Ö–æ—Ä–æ—à–æ –æ—Å–≤–µ—â–µ–Ω–Ω–æ–µ\n"
    "‚Ä¢ –ß–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∏–¥–µ–Ω –Ω–∞ —Ñ–æ—Ç–æ\n"
    "‚Ä¢ –ï—Å–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑\n\n"
    "‚ùì –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã"
)

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä receipt_id
    command_args = message.text.split()
    if len(command_args) > 1 and command_args[1].startswith("receipt_"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º message_id –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        try:
            receipt_param = command_args[1]  # receipt_123
            message_id = int(receipt_param.split("_")[1])
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º message_states –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —á–µ–∫–∞
            from handlers.photo import message_states
            
            if message_id in message_states:
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É Mini App –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ–∫–∞
                clean_url = WEBAPP_URL.strip('"\'')
                webapp_url = f"{clean_url}/app/{message_id}"
                
                builder = InlineKeyboardBuilder()
                webapp_button = InlineKeyboardButton(
                    text="üöÄ –û—Ç–∫—Ä—ã—Ç—å Mini App",
                    web_app=WebAppInfo(url=webapp_url)
                )
                builder.row(webapp_button)
                
                await message.answer(
                    "üìã –û—Ç–∫—Ä—ã–≤–∞—é —á–µ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π.\n\n"
                    "üëÜ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Mini App –∏ –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–∏ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —á–µ–∫–∞.",
                    reply_markup=builder.as_markup()
                )
                return
            else:
                await message.answer(
                    "‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª.\n\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∞."
                )
                return
                
        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ receipt: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ–±—ã—á–Ω—ã–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
    
    # –û–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —á–µ–∫–æ–≤.\n\n"
        "üì∏ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ —á–µ–∫–∞, –∏ —è –ø–æ–º–æ–≥—É —Ä–∞–∑–¥–µ–ª–∏—Ç—å –µ–≥–æ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.\n\n"
        "üîç –Ø –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å:\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤\n"
        "‚Ä¢ –¶–µ–Ω—ã\n"
        "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
        "‚Ä¢ –°–∫–∏–¥–∫–∏\n"
        "‚Ä¢ –ü–ª–∞—Ç—É –∑–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ\n\n"
        "üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ —á–µ–∫–∞, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –µ–≥–æ!"
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(HELP_TEXT)

@router.message(Command("split"))
async def cmd_split(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /split"""
    await state.set_state(ReceiptStates.waiting_for_photo)
    await message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.")

# –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã (–¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ dev/staging –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö)
if ENABLE_TEST_COMMANDS:
    @router.message(Command("testbothwebapp"))
    async def cmd_test_both_webapp(message: Message):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç WebApp —Å –æ–±–µ–∏–º–∏ —Ç–∏–ø–∞–º–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä: Inline –∏ Reply."""
        logger.info("–ö–æ–º–∞–Ω–¥–∞ /testbothwebapp –ø–æ–ª—É—á–µ–Ω–∞")
        
        if not WEBAPP_URL:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
            logger.error("WEBAPP_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return

        # URL –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ WebApp
        test_webapp_url = f"{WEBAPP_URL}/test_webapp"
        
        logger.info(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–∞ —Ç–∏–ø–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è WebApp: {test_webapp_url}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(
            "üß™ **–¢–µ—Å—Ç #1: Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å WebApp**\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å WebApp —á–µ—Ä–µ–∑ Inline-–∫–Ω–æ–ø–∫—É:",
            reply_markup=create_test_webapp_inline_keyboard(test_webapp_url),
            parse_mode="Markdown"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(
            "üß™ **–¢–µ—Å—Ç #2: Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å WebApp**\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è WebApp:",
            reply_markup=create_test_webapp_reply_keyboard(test_webapp_url),
            parse_mode="Markdown"
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        info_message = (
            "üìã **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é:**\n\n"
            "1. üîµ **Inline-–∫–Ω–æ–ø–∫–∞** - –∫–Ω–æ–ø–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã—à–µ\n"
            "2. üü¢ **Reply-–∫–Ω–æ–ø–∫–∞** - –∫–Ω–æ–ø–∫–∞ –≤ –Ω–∏–∂–Ω–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ\n\n"
            "üéØ **–ß—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º:**\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±–µ–∏—Ö —Ç–∏–ø–æ–≤ WebApp\n"
            "‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ (Inline/Reply)\n"
            "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö\n\n"
            "üí° –í WebApp –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '–ü—Ä–∏–≤–µ—Ç' –∏–ª–∏ JSON-–¥–∞–Ω–Ω—ã–µ"
        )
        
        await message.answer(info_message, parse_mode="Markdown")

@router.message(lambda message: message.text == "üîô –£–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É")
async def remove_keyboard(message: Message):
    """–£–±–∏—Ä–∞–µ—Ç Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    await message.answer(
        "‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–±—Ä–∞–Ω–∞.",
        reply_markup=ReplyKeyboardRemove()
    ) 