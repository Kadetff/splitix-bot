from decimal import Decimal
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config.settings import WEBAPP_URL
import logging

logger = logging.getLogger(__name__)

def create_items_keyboard_with_counters(items: list[dict], user_specific_counts: dict[int, int], view_mode: str = "default", message_id: int = None) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for idx, item in enumerate(items):
        description = item.get("description", "N/A")
        current_selection_count = user_specific_counts.get(idx, 0) 
        openai_quantity = item.get("quantity_from_openai", 1)
        unit_price_openai = item.get("unit_price_from_openai")
        total_amount_openai = item.get("total_amount_from_openai")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–≤–∞—Ä –≤–µ—Å–æ–≤—ã–º
        is_weight_item = False
        if openai_quantity == 1 and total_amount_openai is not None and unit_price_openai is not None:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –º–µ–∂–¥—É total_amount –∏ unit_price
            # —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è (—Ä–∞–∑–Ω–∏—Ü–∞ –Ω–µ –±–æ–ª–µ–µ 0.01)
            price_diff = abs(total_amount_openai - unit_price_openai)
            is_weight_item = price_diff > Decimal("0.01")
        
        # –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
        price_display = None
        if is_weight_item and total_amount_openai is not None:
            # –î–ª—è –≤–µ—Å–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º total_amount –Ω–∞–ø—Ä—è–º—É—é
            price_display = total_amount_openai
        elif unit_price_openai is not None:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
            price_display = unit_price_openai
        elif total_amount_openai is not None and openai_quantity > 0:
            try:
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º > 1 –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
                price_display = total_amount_openai / Decimal(str(openai_quantity))
            except (InvalidOperation, ZeroDivisionError):
                pass
            
        price_str = f" - {price_display:.2f}" if price_display is not None else ""
        
        # –ò–∫–æ–Ω–∫–∞ –≥–∞–ª–æ—á–∫–∏, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é
        checkmark_icon = "‚úÖ " if current_selection_count == openai_quantity and openai_quantity > 0 else ""
        
        button_text = f"{checkmark_icon}[{current_selection_count}/{openai_quantity}] {description[:30]}{price_str}"
        builder.row(InlineKeyboardButton(text=button_text, callback_data=f"increment_item:{idx}")) 
    
    if view_mode == "default":
        builder.row(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="confirm_selection"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω message_id
        if message_id is not None and WEBAPP_URL:
            # –û—á–∏—â–∞–µ–º URL –æ—Ç –∫–∞–≤—ã—á–µ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            clean_url = WEBAPP_URL.strip('"\'')
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ URL –≤–º–µ—Å—Ç–æ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            webapp_url = f"{clean_url}/{message_id}"
            
            logger.info(f"–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É WebApp —Å URL: {webapp_url}")
            
            builder.row(InlineKeyboardButton(
                text="üåê –û—Ç–∫—Ä—ã—Ç—å –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ", 
                web_app=WebAppInfo(url=webapp_url)
            ))
        
        builder.row(InlineKeyboardButton(text="üìä –ú–æ–π —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä", callback_data="show_my_summary"))
        builder.row(InlineKeyboardButton(text="üìà –û–±—â–∏–π –∏—Ç–æ–≥ –ø–æ —á–µ–∫—É", callback_data="show_total_summary"))
    elif view_mode == "total_summary_display":
        builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–æ–µ–º—É –≤—ã–±–æ—Ä—É", callback_data="back_to_selection"))
    elif view_mode == "my_summary_display":
        builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="back_to_selection"))

    return builder.as_markup() 