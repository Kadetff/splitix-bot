import asyncio
import logging
import os
from typing import Any
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.types import BotCommand, Update
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from config.settings import TELEGRAM_BOT_TOKEN, LOG_LEVEL, WEBAPP_URL
from handlers import photo, callbacks, commands, webapp, inline

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.DEBUG if LOG_LEVEL == "DEBUG" else logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (items –∏ –∏—Ö —Å—á–µ—Ç—á–∏–∫–∏) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
message_states: dict[int, dict[str, Any]] = {}

# –≠–∫—Å–ø–æ—Ä—Ç message_states –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
callbacks.message_states = message_states
photo.message_states = message_states
webapp.message_states = message_states

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Heroku
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è
APP_NAME = os.getenv('HEROKU_APP_NAME') or os.getenv('APP_NAME') or 'splitix-bot-69642ff6c071'
PORT = os.getenv('PORT')

# –ï—Å–ª–∏ –µ—Å—Ç—å PORT (–æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –º—ã –Ω–∞ Heroku), –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
if PORT:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ WEBAPP_URL (–∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –æ—Å–Ω–æ–≤—É –¥–ª—è webhook)
    if WEBAPP_URL and not WEBAPP_URL.startswith('http://localhost'):
        WEBHOOK_HOST = WEBAPP_URL
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º WEBAPP_URL –¥–ª—è webhook: {WEBAPP_URL}")
    else:
        WEBHOOK_HOST = f"https://{APP_NAME}.herokuapp.com"
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Heroku –¥–æ–º–µ–Ω: {APP_NAME}.herokuapp.com")
    
    WEBHOOK_PATH = f"/bot/{TELEGRAM_BOT_TOKEN}"
    WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
else:
    WEBHOOK_HOST = WEBHOOK_PATH = WEBHOOK_URL = None

async def on_startup(bot: Bot) -> None:
    """–•—É–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ."""
    if WEBHOOK_URL:
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook: {WEBHOOK_URL}")
        await bot.set_webhook(
            url=WEBHOOK_URL,
            allowed_updates=["message", "callback_query", "inline_query", "chosen_inline_result", "web_app_data"]
        )
        logger.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    else:
        logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling (–ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)")

async def on_shutdown(bot: Bot) -> None:
    """–•—É–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è webhook –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ."""
    if WEBHOOK_URL:
        logger.info("–£–¥–∞–ª–µ–Ω–∏–µ webhook...")
        await bot.delete_webhook()
        logger.info("Webhook —É–¥–∞–ª–µ–Ω")

async def create_app() -> web.Application:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    storage = MemoryStorage()
    bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher(storage=storage)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    await register_commands(bot)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    @dp.update.outer_middleware()
    async def update_logger(handler, event, data):
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {type(event)}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º WebApp –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(event, 'message') and event.message and hasattr(event.message, 'web_app_data') and event.message.web_app_data:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã WebApp –¥–∞–Ω–Ω—ã–µ: {event.message.web_app_data.data}")
        
        return await handler(event, data)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–í–ê–ñ–ù–û: –ø–æ—Ä—è–¥–æ–∫ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ!)
    # –°–Ω–∞—á–∞–ª–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –ø–æ—Ç–æ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ
    dp.include_router(commands.router)    # –ö–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–≤—ã–º–∏
    dp.include_router(callbacks.router)   # Callback-–∫–Ω–æ–ø–∫–∏
    dp.include_router(photo.router)       # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    dp.include_router(inline.router)      # Inline-—Ä–µ–∂–∏–º
    dp.include_router(webapp.router)      # WebApp (—Å fallback) - –ü–û–°–õ–ï–î–ù–ò–ú!
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö—É–∫–æ–≤
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = web.Application()
    
    if WEBHOOK_URL:
        # Webhook —Ä–µ–∂–∏–º –¥–ª—è Heroku
        webhook_requests_handler = SimpleRequestHandler(
            dispatcher=dp,
            bot=bot,
        )
        webhook_requests_handler.register(app, path=WEBHOOK_PATH)
        setup_application(app, dp, bot=bot)
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –¥–ª—è webhook —Ä–µ–∂–∏–º–∞")
    else:
        # Polling —Ä–µ–∂–∏–º –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        async def start_polling():
            await dp.start_polling(bot)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
        asyncio.create_task(start_polling())
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –¥–ª—è polling —Ä–µ–∂–∏–º–∞")
    
    return app

async def register_commands(bot: Bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–µ–Ω—é."""
    from config.settings import ENABLE_TEST_COMMANDS
    
    commands = [
        BotCommand(command="start", description="üëã –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"),
        BotCommand(command="split", description="üìá –†–∞–∑–¥–µ–ª–∏—Ç—å —á–µ–∫ (–≤ –≥—Ä—É–ø–ø–µ)"),
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –≤ dev/staging –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö
    if ENABLE_TEST_COMMANDS:
        commands.append(
            BotCommand(command="testbothwebapp", description="üß™ –¢–µ—Å—Ç–æ–≤—ã–π WebApp (Inline + Reply)")
        )
    
    await bot.set_my_commands(commands)
    logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(commands)} –∫–æ–º–∞–Ω–¥ (—Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã: {'–≤–∫–ª—é—á–µ–Ω—ã' if ENABLE_TEST_COMMANDS else '–æ—Ç–∫–ª—é—á–µ–Ω—ã'})")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤ polling —Ä–µ–∂–∏–º–µ."""
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å OpenAI GPT Vision –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –≤—ã–±–æ—Ä–∞...")
    logger.info(f"–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {LOG_LEVEL}")
    
    if WEBHOOK_URL:
        logger.info("–†–µ–∂–∏–º webhook - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä")
        return
    
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –ø—Ä–æ—Å—Ç–æ–π polling
    storage = MemoryStorage()
    bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher(storage=storage)
    
    await register_commands(bot)
    
    @dp.update.outer_middleware()
    async def update_logger(handler, event, data):
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {type(event)}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º WebApp –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(event, 'message') and event.message and hasattr(event.message, 'web_app_data') and event.message.web_app_data:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã WebApp –¥–∞–Ω–Ω—ã–µ: {event.message.web_app_data.data}")
        
        return await handler(event, data)
    
    dp.include_router(commands.router)
    dp.include_router(callbacks.router)
    dp.include_router(photo.router)
    dp.include_router(inline.router)
    dp.include_router(webapp.router)
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 