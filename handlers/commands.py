import logging
import os
from aiogram import Router
from aiogram.types import Message, InlineKeyboardButton, WebAppInfo
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from handlers.photo import ReceiptStates
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config.settings import WEBAPP_URL, TELEGRAM_BOT_TOKEN

logger = logging.getLogger(__name__)
router = Router()

HELP_TEXT = (
    "üìö –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
    "1. üì∏ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —á–µ–∫–∞\n"
    "2. üîç –Ø —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ç–æ–≤–∞—Ä—ã –∏ —Ü–µ–Ω—ã\n"
    "3. ‚úÖ –í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–≤–æ–π —Å—á–µ—Ç\n"
    "4. üí∞ –Ø –ø–æ—Å—á–∏—Ç–∞—é —Ç–≤–æ—é —á–∞—Å—Ç—å\n\n"
    "üí° –°–æ–≤–µ—Ç—ã:\n"
    "‚Ä¢ –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ñ–æ—Ç–æ —á–µ–∫–∞ —á–µ—Ç–∫–æ–µ –∏ —Ö–æ—Ä–æ—à–æ –æ—Å–≤–µ—â–µ–Ω–Ω–æ–µ\n"
    "‚Ä¢ –ß–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∏–¥–µ–Ω –Ω–∞ —Ñ–æ—Ç–æ\n"
    "‚Ä¢ –ï—Å–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑\n\n"
    "‚ùì –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã"
)

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ webapp"""
    args = message.text.split(maxsplit=1)
    if len(args) > 1 and args[1].startswith("webapp_"):
        message_id = args[1].replace("webapp_", "")
        webapp_url = f"{WEBAPP_URL}/{message_id}"
        keyboard = InlineKeyboardBuilder()
        keyboard.row(
            InlineKeyboardButton(
                text="üåê –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                web_app=WebAppInfo(url=webapp_url)
            )
        )
        await message.answer(
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
            reply_markup=keyboard.as_markup()
        )
        return
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —á–µ–∫–æ–≤.\n\n"
        "üì∏ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ —á–µ–∫–∞, –∏ —è –ø–æ–º–æ–≥—É —Ä–∞–∑–¥–µ–ª–∏—Ç—å –µ–≥–æ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.\n\n"
        "üîç –Ø –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å:\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤\n"
        "‚Ä¢ –¶–µ–Ω—ã\n"
        "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
        "‚Ä¢ –°–∫–∏–¥–∫–∏\n"
        "‚Ä¢ –ü–ª–∞—Ç—É –∑–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ\n\n"
        "üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ —á–µ–∫–∞, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –µ–≥–æ!"
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(HELP_TEXT)

@router.message(Command("split"))
async def cmd_split(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /split"""
    await state.set_state(ReceiptStates.waiting_for_photo)
    await message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.")

@router.message(Command("testwebapp"))
async def cmd_test_webapp(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ WebApp."""
    logger.critical(f"!!!! –ö–û–ú–ê–ù–î–ê /testwebapp –ü–û–õ–£–ß–ï–ù–ê !!!! WEBAPP_URL: {WEBAPP_URL}")
    
    if not WEBAPP_URL:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
        logger.error("WEBAPP_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–µ –º–æ–≥—É –æ—Ç–∫—Ä—ã—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π WebApp.")
        return

    # URL –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ WebApp –±—É–¥–µ—Ç WEBAPP_URL + '/test_webapp'
    # –í–∞–∂–Ω–æ: WEBAPP_URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–∞–∑–æ–≤—ã–º URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://yourdomain.com)
    # –±–µ–∑ –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ —Å–ª–µ—à–∞, –µ—Å–ª–∏ –≤—ã –µ–≥–æ —Ç–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ, –∏–ª–∏ —Å –Ω–∏–º, –µ—Å–ª–∏ –≤–∞—à Flask –Ω–∞—Å—Ç—Ä–æ–µ–Ω –æ–∂–∏–¥–∞—Ç—å –µ–≥–æ.
    # –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ server.py (–º–∞—Ä—à—Ä—É—Ç /test_webapp) –æ–Ω –æ–∂–∏–¥–∞–µ—Ç, —á—Ç–æ WEBAPP_URL –Ω–µ –∏–º–µ–µ—Ç —Å–ª–µ—à–∞ –Ω–∞ –∫–æ–Ω—Ü–µ.
    test_webapp_url = f"{WEBAPP_URL}/test_webapp"
    
    logger.info(f"–§–æ—Ä–º–∏—Ä—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ WebApp: {test_webapp_url}")

    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(
            text="üß™ –û—Ç–∫—Ä—ã—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π WebApp",
            web_app=WebAppInfo(url=test_webapp_url)
        )
    )
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.",
        reply_markup=keyboard.as_markup()
    )

@router.message(Command("webhook"))
async def cmd_webhook_info(message: Message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å webhook."""
    try:
        webhook_info = await message.bot.get_webhook_info()
        logger.critical(f"!!!! WEBHOOK INFO !!!! {webhook_info}")
        
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if webhook_info.url else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        
        response = f"üîó **–°—Ç–∞—Ç—É—Å Webhook**: {status}\n"
        response += f"üì° **URL**: `{webhook_info.url or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`\n"
        response += f"üî¢ **Pending updates**: {webhook_info.pending_update_count}\n"
        response += f"üìÖ **–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞**: {webhook_info.last_error_date or '–ù–µ—Ç'}\n"
        response += f"üîß **Allowed updates**: {webhook_info.allowed_updates}\n"
        
        if webhook_info.last_error_message:
            response += f"‚ö†Ô∏è **–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ**: {webhook_info.last_error_message}\n"
            
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook: {e}")

@router.message(Command("fixwebhook"))
async def cmd_fix_webhook(message: Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π web_app_data."""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π URL webhook —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—á–Ω–æ —Ç–∞–∫–æ–π –∂–µ
        current_webhook = await message.bot.get_webhook_info()
        if current_webhook.url:
            WEBHOOK_URL = current_webhook.url
            logger.critical(f"!!!! –ò–°–ü–û–õ–¨–ó–£–ï–ú –¢–ï–ö–£–©–ò–ô WEBHOOK URL: {WEBHOOK_URL} !!!!")
        else:
            # Fallback: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º webhook URL –∫–∞–∫ –≤ main.py
            APP_NAME = os.getenv('HEROKU_APP_NAME') or os.getenv('APP_NAME') or 'splitix-bot-69642ff6c071'
            WEBHOOK_HOST = f"https://{APP_NAME}.herokuapp.com"
            WEBHOOK_PATH = f"/bot/{TELEGRAM_BOT_TOKEN}"
            WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
            logger.critical(f"!!!! WEBHOOK –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù, –°–û–ó–î–ê–ï–ú –ù–û–í–´–ô: {WEBHOOK_URL} !!!!")
        
        await message.answer("üîß –û–±–Ω–æ–≤–ª—è—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook...")
        logger.critical(f"!!!! –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï WEBHOOK: {WEBHOOK_URL} !!!!")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        await message.bot.set_webhook(
            url=WEBHOOK_URL,
            allowed_updates=["message", "callback_query", "inline_query", "chosen_inline_result", "web_app_data"]
        )
        
        logger.critical("!!!! WEBHOOK –û–ë–ù–û–í–õ–ï–ù –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û !!!!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        webhook_info = await message.bot.get_webhook_info()
        logger.critical(f"!!!! –ù–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò WEBHOOK !!!! {webhook_info}")
        
        response = "‚úÖ **Webhook –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
        response += f"üì° **URL**: `{webhook_info.url}`\n"
        response += f"üîß **Allowed updates**: {webhook_info.allowed_updates}\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ web_app_data
        if 'web_app_data' in webhook_info.allowed_updates:
            response += "\nüéâ **web_app_data –≤–∫–ª—é—á–µ–Ω!** –¢–µ–ø–µ—Ä—å WebApp –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å."
        else:
            response += "\n‚ùå **web_app_data –≤—Å–µ –µ—â–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!** –í–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."
            
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ webhook: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ webhook: {e}") 