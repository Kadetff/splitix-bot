import logging
import os
from aiogram import Router
from aiogram.types import Message, InlineKeyboardButton, WebAppInfo, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from handlers.photo import ReceiptStates
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from config.settings import WEBAPP_URL, TELEGRAM_BOT_TOKEN

logger = logging.getLogger(__name__)
router = Router()

HELP_TEXT = (
    "üìö –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
    "1. üì∏ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —á–µ–∫–∞\n"
    "2. üîç –Ø —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ç–æ–≤–∞—Ä—ã –∏ —Ü–µ–Ω—ã\n"
    "3. ‚úÖ –í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–≤–æ–π —Å—á–µ—Ç\n"
    "4. üí∞ –Ø –ø–æ—Å—á–∏—Ç–∞—é —Ç–≤–æ—é —á–∞—Å—Ç—å\n\n"
    "üí° –°–æ–≤–µ—Ç—ã:\n"
    "‚Ä¢ –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ñ–æ—Ç–æ —á–µ–∫–∞ —á–µ—Ç–∫–æ–µ –∏ —Ö–æ—Ä–æ—à–æ –æ—Å–≤–µ—â–µ–Ω–Ω–æ–µ\n"
    "‚Ä¢ –ß–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∏–¥–µ–Ω –Ω–∞ —Ñ–æ—Ç–æ\n"
    "‚Ä¢ –ï—Å–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑\n\n"
    "‚ùì –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã"
)

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ webapp"""
    args = message.text.split(maxsplit=1)
    if len(args) > 1:
        param = args[1]
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ WebApp –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä
        if param.startswith("webapp_data_"):
            try:
                encoded_data = param.replace("webapp_data_", "")
                import urllib.parse
                decoded_data = urllib.parse.unquote(encoded_data)
                
                logger.critical(f"!!!! –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –°–ü–û–°–û–ë: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ URL !!!! {decoded_data}")
                
                # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
                import json
                data = json.loads(decoded_data)
                
                response = "üéâ **–£–°–ü–ï–•! –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º!**\n\n"
                response += f"üì§ **–°–æ–æ–±—â–µ–Ω–∏–µ**: `{data.get('message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')}`\n"
                response += f"‚è∞ **–í—Ä–µ–º—è**: `{data.get('timestamp', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}`\n"
                response += f"üîÑ **–ò—Å—Ç–æ—á–Ω–∏–∫**: `{data.get('from', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}`\n\n"
                response += "‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç!"
                
                await message.answer(response, parse_mode="Markdown")
                return
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webapp_data_: {e}")
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
                return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ webapp_
        elif param.startswith("webapp_"):
            message_id = param.replace("webapp_", "")
            webapp_url = f"{WEBAPP_URL}/{message_id}"
            keyboard = InlineKeyboardBuilder()
            keyboard.row(
                InlineKeyboardButton(
                    text="üåê –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    web_app=WebAppInfo(url=webapp_url)
                )
            )
            await message.answer(
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
                reply_markup=keyboard.as_markup()
            )
            return
    
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —á–µ–∫–æ–≤.\n\n"
        "üì∏ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ —á–µ–∫–∞, –∏ —è –ø–æ–º–æ–≥—É —Ä–∞–∑–¥–µ–ª–∏—Ç—å –µ–≥–æ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.\n\n"
        "üîç –Ø –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å:\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤\n"
        "‚Ä¢ –¶–µ–Ω—ã\n"
        "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
        "‚Ä¢ –°–∫–∏–¥–∫–∏\n"
        "‚Ä¢ –ü–ª–∞—Ç—É –∑–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ\n\n"
        "üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ —á–µ–∫–∞, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –µ–≥–æ!"
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(HELP_TEXT)

@router.message(Command("split"))
async def cmd_split(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /split"""
    await state.set_state(ReceiptStates.waiting_for_photo)
    await message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.")

@router.message(Command("testwebapp"))
async def cmd_test_webapp(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ WebApp."""
    logger.critical(f"!!!! –ö–û–ú–ê–ù–î–ê /testwebapp –ü–û–õ–£–ß–ï–ù–ê !!!! WEBAPP_URL: {WEBAPP_URL}")
    
    if not WEBAPP_URL:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
        logger.error("WEBAPP_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–µ –º–æ–≥—É –æ—Ç–∫—Ä—ã—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π WebApp.")
        return

    # URL –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ WebApp –±—É–¥–µ—Ç WEBAPP_URL + '/test_webapp'
    # –í–∞–∂–Ω–æ: WEBAPP_URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–∞–∑–æ–≤—ã–º URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://yourdomain.com)
    # –±–µ–∑ –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ —Å–ª–µ—à–∞, –µ—Å–ª–∏ –≤—ã –µ–≥–æ —Ç–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ, –∏–ª–∏ —Å –Ω–∏–º, –µ—Å–ª–∏ –≤–∞—à Flask –Ω–∞—Å—Ç—Ä–æ–µ–Ω –æ–∂–∏–¥–∞—Ç—å –µ–≥–æ.
    # –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ server.py (–º–∞—Ä—à—Ä—É—Ç /test_webapp) –æ–Ω –æ–∂–∏–¥–∞–µ—Ç, —á—Ç–æ WEBAPP_URL –Ω–µ –∏–º–µ–µ—Ç —Å–ª–µ—à–∞ –Ω–∞ –∫–æ–Ω—Ü–µ.
    test_webapp_url = f"{WEBAPP_URL}/test_webapp"
    
    logger.info(f"–§–æ—Ä–º–∏—Ä—É—é Reply-–∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ WebApp: {test_webapp_url}")

    # –°–æ–∑–¥–∞–µ–º Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π WebApp
    keyboard = ReplyKeyboardBuilder()
    keyboard.row(
        KeyboardButton(
            text="üß™ –û—Ç–∫—Ä—ã—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π WebApp",
            web_app=WebAppInfo(url=test_webapp_url)
        )
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–£–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"
    keyboard.row(KeyboardButton(text="üîô –£–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"))
    
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.",
        reply_markup=keyboard.as_markup(resize_keyboard=True, one_time_keyboard=False)
    )

@router.message(lambda message: message.text == "üîô –£–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É")
async def remove_keyboard(message: Message):
    """–£–±–∏—Ä–∞–µ—Ç Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    await message.answer(
        "‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–±—Ä–∞–Ω–∞.",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(Command("webhook"))
async def cmd_webhook_info(message: Message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å webhook."""
    try:
        webhook_info = await message.bot.get_webhook_info()
        logger.critical(f"!!!! WEBHOOK INFO !!!! {webhook_info}")
        
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if webhook_info.url else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        
        response = f"üîó **–°—Ç–∞—Ç—É—Å Webhook**: {status}\n"
        response += f"üì° **URL**: `{webhook_info.url or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`\n"
        response += f"üî¢ **Pending updates**: {webhook_info.pending_update_count}\n"
        response += f"üìÖ **–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞**: {webhook_info.last_error_date or '–ù–µ—Ç'}\n"
        response += f"üîß **Allowed updates**: {webhook_info.allowed_updates}\n"
        
        if webhook_info.last_error_message:
            response += f"‚ö†Ô∏è **–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ**: {webhook_info.last_error_message}\n"
            
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook: {e}")

@router.message(Command("fixwebhook"))
async def cmd_fix_webhook(message: Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π web_app_data."""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π URL webhook —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—á–Ω–æ —Ç–∞–∫–æ–π –∂–µ
        current_webhook = await message.bot.get_webhook_info()
        if current_webhook.url:
            WEBHOOK_URL = current_webhook.url
            logger.critical(f"!!!! –ò–°–ü–û–õ–¨–ó–£–ï–ú –¢–ï–ö–£–©–ò–ô WEBHOOK URL: {WEBHOOK_URL} !!!!")
        else:
            # Fallback: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º webhook URL –∫–∞–∫ –≤ main.py
            APP_NAME = os.getenv('HEROKU_APP_NAME') or os.getenv('APP_NAME') or 'splitix-bot-69642ff6c071'
            WEBHOOK_HOST = f"https://{APP_NAME}.herokuapp.com"
            WEBHOOK_PATH = f"/bot/{TELEGRAM_BOT_TOKEN}"
            WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
            logger.critical(f"!!!! WEBHOOK –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù, –°–û–ó–î–ê–ï–ú –ù–û–í–´–ô: {WEBHOOK_URL} !!!!")
        
        await message.answer("üîß –û–±–Ω–æ–≤–ª—è—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook...")
        logger.critical(f"!!!! –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï WEBHOOK: {WEBHOOK_URL} !!!!")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        await message.bot.set_webhook(
            url=WEBHOOK_URL,
            allowed_updates=["message", "callback_query", "inline_query", "chosen_inline_result", "web_app_data"]
        )
        
        logger.critical("!!!! WEBHOOK –û–ë–ù–û–í–õ–ï–ù –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û !!!!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        webhook_info = await message.bot.get_webhook_info()
        logger.critical(f"!!!! –ù–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò WEBHOOK !!!! {webhook_info}")
        
        response = "‚úÖ **Webhook –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
        response += f"üì° **URL**: `{webhook_info.url}`\n"
        response += f"üîß **Allowed updates**: {webhook_info.allowed_updates}\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ web_app_data
        if 'web_app_data' in webhook_info.allowed_updates:
            response += "\nüéâ **web_app_data –≤–∫–ª—é—á–µ–Ω!** –¢–µ–ø–µ—Ä—å WebApp –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å."
        else:
            response += "\n‚ùå **web_app_data –≤—Å–µ –µ—â–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!** –í–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."
            
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ webhook: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ webhook: {e}")

@router.message(Command("resetwebhook"))
async def cmd_reset_webhook(message: Message):
    """–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å webhook: —É–¥–∞–ª–µ–Ω–∏–µ + –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å web_app_data."""
    try:
        await message.answer("üî• –í—ã–ø–æ–ª–Ω—è—é –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å webhook...")
        
        # –®–∞–≥ 1: –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π webhook
        logger.critical("!!!! –®–ê–ì 1: –£–î–ê–õ–ï–ù–ò–ï WEBHOOK !!!!")
        await message.bot.delete_webhook()
        await message.answer("‚úÖ Webhook —É–¥–∞–ª–µ–Ω")
        
        # –®–∞–≥ 2: –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
        import asyncio
        await asyncio.sleep(1)
        
        # –®–∞–≥ 3: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL —Å —É—á–µ—Ç–æ–º CUSTOM_DOMAIN
        CUSTOM_DOMAIN = os.getenv('CUSTOM_DOMAIN')
        if CUSTOM_DOMAIN:
            WEBHOOK_HOST = f"https://{CUSTOM_DOMAIN}"
            logger.critical(f"!!!! –ò–°–ü–û–õ–¨–ó–£–ï–ú –ö–ê–°–¢–û–ú–ù–´–ô –î–û–ú–ï–ù: {CUSTOM_DOMAIN} !!!!")
        else:
            APP_NAME = os.getenv('HEROKU_APP_NAME') or os.getenv('APP_NAME') or 'splitix-bot-69642ff6c071'
            WEBHOOK_HOST = f"https://{APP_NAME}.herokuapp.com"
            logger.critical(f"!!!! –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–¢–ê–ù–î–ê–†–¢–ù–´–ô –î–û–ú–ï–ù: {APP_NAME}.herokuapp.com !!!!")
        
        WEBHOOK_PATH = f"/bot/{TELEGRAM_BOT_TOKEN}"
        WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
        
        logger.critical(f"!!!! –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú WEBHOOK: {WEBHOOK_URL} !!!!")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook —Å web_app_data
        result = await message.bot.set_webhook(
            url=WEBHOOK_URL,
            allowed_updates=["message", "callback_query", "inline_query", "chosen_inline_result", "web_app_data"]
        )
        
        logger.critical(f"!!!! –†–ï–ó–£–õ–¨–¢–ê–¢ set_webhook: {result} !!!!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        webhook_info = await message.bot.get_webhook_info()
        logger.critical(f"!!!! –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï –£–°–¢–ê–ù–û–í–ö–ò: {webhook_info} !!!!")
        
        response = f"‚úÖ **Webhook –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!**\n\n"
        response += f"üì° **URL**: `{webhook_info.url}`\n"
        response += f"üîß **Allowed updates**: {webhook_info.allowed_updates}\n"
        
        if 'web_app_data' in webhook_info.allowed_updates:
            response += "\nüéâ **–£–°–ü–ï–•! web_app_data –≤–∫–ª—é—á–µ–Ω!**"
        else:
            response += "\n‚ùå **web_app_data –≤—Å–µ –µ—â–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç...**"
            
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ webhook: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ webhook: {e}")

@router.message(Command("diagwebhook"))
async def cmd_diag_webhook(message: Message):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ webhook –∏ –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–Ω—è—Ç—å –ø–æ—á–µ–º—É web_app_data –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç."""
    try:
        await message.answer("üîç –ó–∞–ø—É—Å–∫–∞—é –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        me = await message.bot.get_me()
        logger.critical(f"!!!! BOT INFO: {me} !!!!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π webhook
        webhook_info = await message.bot.get_webhook_info()
        logger.critical(f"!!!! CURRENT WEBHOOK: {webhook_info} !!!!")
        
        # –ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook –¢–û–õ–¨–ö–û —Å web_app_data –¥–ª—è —Ç–µ—Å—Ç–∞
        test_url = webhook_info.url if webhook_info.url else f"https://splitix-bot-69642ff6c071.herokuapp.com/bot/{TELEGRAM_BOT_TOKEN}"
        
        logger.critical(f"!!!! –¢–ï–°–¢: –£–°–¢–ê–ù–û–í–ö–ê WEBHOOK –¢–û–õ–¨–ö–û –° web_app_data !!!!")
        try:
            result = await message.bot.set_webhook(
                url=test_url,
                allowed_updates=["web_app_data"]  # –¢–û–õ–¨–ö–û web_app_data
            )
            logger.critical(f"!!!! –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê: {result} !!!!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å
            test_webhook = await message.bot.get_webhook_info()
            logger.critical(f"!!!! –¢–ï–°–¢–û–í–´–ô WEBHOOK: {test_webhook} !!!!")
            
            response = "üß™ **–¢–µ—Å—Ç —Å only web_app_data:**\n"
            response += f"–†–µ–∑—É–ª—å—Ç–∞—Ç: `{result}`\n"
            response += f"Allowed updates: `{test_webhook.allowed_updates}`\n\n"
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä
            await message.bot.set_webhook(
                url=test_url,
                allowed_updates=["message", "callback_query", "inline_query", "chosen_inline_result", "web_app_data"]
            )
            
            final_webhook = await message.bot.get_webhook_info()
            response += f"üîÑ **–ü–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞:**\n"
            response += f"Allowed updates: `{final_webhook.allowed_updates}`\n"
            
            await message.answer(response, parse_mode="Markdown")
            
        except Exception as test_error:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {test_error}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {test_error}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: {e}")

@router.message(Command("safewebhook"))
async def cmd_safe_webhook(message: Message):
    """–û—Å—Ç–æ—Ä–æ–∂–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook —Å —É—á–µ—Ç–æ–º rate limiting."""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        webhook_info = await message.bot.get_webhook_info()
        
        response = "üîç **–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:**\n"
        response += f"URL: `{webhook_info.url}`\n"
        response += f"Allowed updates: `{webhook_info.allowed_updates}`\n\n"
        
        # –ï—Å–ª–∏ web_app_data —É–∂–µ –µ—Å—Ç—å - –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
        if 'web_app_data' in webhook_info.allowed_updates:
            response += "‚úÖ **web_app_data —É–∂–µ –≤–∫–ª—é—á–µ–Ω!** –ù–∏—á–µ–≥–æ –º–µ–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ."
            await message.answer(response, parse_mode="Markdown")
            return
        
        response += "‚ö†Ô∏è **web_app_data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç**\n\n"
        response += "üéØ **–û–î–ò–ù** –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ webhook...\n"
        
        await message.answer(response, parse_mode="Markdown")
        
        # –û–î–ò–ù –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        logger.critical("!!!! –û–°–¢–û–†–û–ñ–ù–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê WEBHOOK !!!!")
        
        try:
            result = await message.bot.set_webhook(
                url=webhook_info.url,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π URL
                allowed_updates=["message", "callback_query", "inline_query", "chosen_inline_result", "web_app_data"]
            )
            logger.critical(f"!!!! –†–ï–ó–£–õ–¨–¢–ê–¢ –û–°–¢–û–†–û–ñ–ù–û–ô –£–°–¢–ê–ù–û–í–ö–ò: {result} !!!!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            import asyncio
            await asyncio.sleep(2)  # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
            
            new_webhook = await message.bot.get_webhook_info()
            logger.critical(f"!!!! –ù–û–í–´–ô WEBHOOK –ü–û–°–õ–ï –û–°–¢–û–†–û–ñ–ù–û–ô –£–°–¢–ê–ù–û–í–ö–ò: {new_webhook} !!!!")
            
            final_response = "‚úÖ **–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏:**\n"
            final_response += f"Allowed updates: `{new_webhook.allowed_updates}`\n\n"
            
            if 'web_app_data' in new_webhook.allowed_updates:
                final_response += "üéâ **–£–°–ü–ï–•! web_app_data –≤–∫–ª—é—á–µ–Ω!**\n\n"
                final_response += "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å WebApp!"
            else:
                final_response += "‚ùå **web_app_data –≤—Å–µ –µ—â–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç**\n\n"
                final_response += "–í–æ–∑–º–æ–∂–Ω–æ, –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram API."
            
            await message.answer(final_response, parse_mode="Markdown")
            
        except Exception as webhook_error:
            error_message = str(webhook_error)
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {error_message}")
            
            if "flood control" in error_message.lower() or "too many requests" in error_message.lower():
                await message.answer(
                    "üö´ **Flood control –∞–∫—Ç–∏–≤–µ–Ω**\n\n"
                    "Telegram –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è webhook.\n"
                    "–ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n"
                    "‚ùó –ù–ï –∑–∞–ø—É—Å–∫–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è webhook –ø–æ–≤—Ç–æ—Ä–Ω–æ!"
                )
            else:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_message}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.message(Command("testwebappdata"))
async def cmd_test_web_app_data(message: Message):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å web_app_data."""
    try:
        await message.answer("üî¨ **–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ web_app_data...**")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π webhook
        webhook_info = await message.bot.get_webhook_info()
        logger.critical(f"!!!! –¢–û–ß–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: {webhook_info} !!!!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è
        possible_names = [
            "web_app_data",
            "webapp_data", 
            "webAppData",
            "web-app-data"
        ]
        
        response = "üîç **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ web_app_data:**\n\n"
        response += f"üì° URL: `{webhook_info.url}`\n"
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ allowed_updates
        allowed_updates = webhook_info.allowed_updates or []
        response += f"üîß Allowed updates: `{allowed_updates}`\n"
        
        if webhook_info.allowed_updates is None:
            response += "‚ö†Ô∏è **–í–ê–ñ–ù–û: allowed_updates = None** (–ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n\n"
        else:
            response += f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {len(allowed_updates)}\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        found_variants = []
        for variant in possible_names:
            if variant in allowed_updates:
                found_variants.append(variant)
        
        if found_variants:
            response += f"‚úÖ **–ù–∞–π–¥–µ–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã:** `{found_variants}`\n\n"
        else:
            response += "‚ùå **–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ web_app_data**\n\n"
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        response += "üß™ **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:**\n\n"
        
        try:
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –¢–æ–ª—å–∫–æ web_app_data
            logger.critical("!!!! –¢–ï–°–¢ 1: –¢–û–õ–¨–ö–û web_app_data !!!!")
            result1 = await message.bot.set_webhook(
                url=webhook_info.url,
                allowed_updates=["web_app_data"]
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            import asyncio
            await asyncio.sleep(1)
            test1_webhook = await message.bot.get_webhook_info()
            test1_updates = test1_webhook.allowed_updates or []
            
            if 'web_app_data' in test1_updates:
                response += "‚úÖ **–¢–µ—Å—Ç 1 (—Ç–æ–ª—å–∫–æ web_app_data): –£–°–ü–ï–•**\n"
            else:
                response += f"‚ùå **–¢–µ—Å—Ç 1: –ù–ï–£–°–ü–ï–•** - –ø–æ–ª—É—á–∏–ª–∏: `{test1_updates}`\n"
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å web_app_data –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
            logger.critical("!!!! –¢–ï–°–¢ 2: web_app_data –í –ù–ê–ß–ê–õ–ï !!!!")
            result2 = await message.bot.set_webhook(
                url=webhook_info.url,
                allowed_updates=["web_app_data", "message", "callback_query", "inline_query", "chosen_inline_result"]
            )
            
            await asyncio.sleep(1)
            test2_webhook = await message.bot.get_webhook_info()
            test2_updates = test2_webhook.allowed_updates or []
            
            if 'web_app_data' in test2_updates:
                response += "‚úÖ **–¢–µ—Å—Ç 2 (web_app_data –ø–µ—Ä–≤—ã–º): –£–°–ü–ï–•**\n"
            else:
                response += f"‚ùå **–¢–µ—Å—Ç 2: –ù–ï–£–°–ü–ï–•** - –ø–æ–ª—É—á–∏–ª–∏: `{test2_updates}`\n"
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ü–æ–ø—Ä–æ–±—É–µ–º None (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ —Ç–∏–ø—ã)
            logger.critical("!!!! –¢–ï–°–¢ 3: allowed_updates=None (–≤—Å–µ —Ç–∏–ø—ã) !!!!")
            result3 = await message.bot.set_webhook(
                url=webhook_info.url,
                allowed_updates=None  # –í—Å–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            )
            
            await asyncio.sleep(1)
            test3_webhook = await message.bot.get_webhook_info()
            test3_updates = test3_webhook.allowed_updates or []
            
            if test3_webhook.allowed_updates is None:
                response += "‚úÖ **–¢–µ—Å—Ç 3 (allowed_updates=None): –£–°–ü–ï–•** - –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã\n"
            else:
                response += f"‚ùå **–¢–µ—Å—Ç 3: –ù–ï–£–°–ü–ï–•** - –ø–æ–ª—É—á–∏–ª–∏: `{test3_updates}`\n"
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 4: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            logger.critical("!!!! –í–û–ó–í–†–ê–¢ –ö –°–¢–ê–ù–î–ê–†–¢–ù–û–ô –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò !!!!")
            await message.bot.set_webhook(
                url=webhook_info.url,
                allowed_updates=["message", "callback_query", "inline_query", "chosen_inline_result", "web_app_data"]
            )
            
            await asyncio.sleep(1)
            final_webhook = await message.bot.get_webhook_info()
            final_updates = final_webhook.allowed_updates or []
            
            response += f"\nüîÑ **–§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:** `{final_updates}`\n\n"
            
            if final_webhook.allowed_updates is None:
                response += "üéâ **–ò–¢–û–ì: allowed_updates=None (–í–°–ï —Ç–∏–ø—ã –≤–∫–ª—é—á–µ–Ω—ã)!**\n\n"
                response += "–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ web_app_data –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å!"
            elif 'web_app_data' in final_updates:
                response += "üéâ **–ò–¢–û–ì: web_app_data –í–ö–õ–Æ–ß–ï–ù!**\n\n"
                response += "–¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp."
            else:
                response += "‚ùå **–ò–¢–û–ì: web_app_data –ù–ï –í–ö–õ–Æ–ß–ï–ù**\n\n"
                response += "–í–æ–∑–º–æ–∂–Ω–æ, –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram API –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π."
            
            await message.answer(response, parse_mode="Markdown")
            
        except Exception as test_error:
            error_msg = str(test_error)
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {error_msg}")
            await message.answer(f"‚ùå **–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:** `{error_msg}`", parse_mode="Markdown")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: {e}")

@router.message(Command("testwwwwebhook"))
async def cmd_test_www_webhook(message: Message):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç webhook —Å www. –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º Heroku."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π webhook
        webhook_info = await message.bot.get_webhook_info()
        current_url = webhook_info.url
        
        await message.answer("üåê **–¢–µ—Å—Ç–∏—Ä—É—é webhook —Å www. –ø—Ä–µ—Ñ–∏–∫—Å–æ–º...**")
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Å–∏–∏ URL —Å www
        possible_urls = []
        
        if current_url:
            # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â–∏–π URL
            import re
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω –∏–∑ URL
            match = re.search(r'https://([^/]+)/', current_url)
            if match:
                domain = match.group(1)
                path = current_url.replace(f'https://{domain}', '')
                
                # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å www
                if not domain.startswith('www.'):
                    www_url = f"https://www.{domain}{path}"
                    possible_urls.append(www_url)
                
                # –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º –±–µ–∑ —Å—É–±–¥–æ–º–µ–Ω–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
                if '.' in domain:
                    parts = domain.split('.')
                    if len(parts) >= 3:  # –Ω–∞–ø—Ä–∏–º–µ—Ä: splitix-bot-69642ff6c071.herokuapp.com
                        main_domain = '.'.join(parts[-2:])  # herokuapp.com
                        app_name = parts[0]  # splitix-bot-69642ff6c071
                        clean_url = f"https://www.{app_name}.{main_domain}{path}"
                        if clean_url not in possible_urls:
                            possible_urls.append(clean_url)
        
        # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        standard_urls = [
            f"https://www.splitix-bot-69642ff6c071.herokuapp.com/bot/{TELEGRAM_BOT_TOKEN}",
            f"https://www.splitix-bot.herokuapp.com/bot/{TELEGRAM_BOT_TOKEN}"
        ]
        
        for url in standard_urls:
            if url not in possible_urls:
                possible_urls.append(url)
        
        logger.critical(f"!!!! –¢–ï–°–¢–ò–†–£–Æ URLS –° WWW: {possible_urls} !!!!")
        
        response = f"üîç **–¢–µ–∫—É—â–∏–π URL:** `{current_url}`\n\n"
        response += f"üß™ **–ë—É–¥–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å {len(possible_urls)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å www:**\n"
        
        for i, url in enumerate(possible_urls, 1):
            response += f"{i}. `{url}`\n"
        
        await message.answer(response, parse_mode="Markdown")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π URL
        successful_urls = []
        
        for i, test_url in enumerate(possible_urls, 1):
            try:
                await message.answer(f"üß™ **–¢–µ—Å—Ç {i}/{len(possible_urls)}**: {test_url[:50]}...")
                
                logger.critical(f"!!!! –¢–ï–°–¢ {i}: –£–°–¢–ê–ù–û–í–ö–ê {test_url} !!!!")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
                result = await message.bot.set_webhook(
                    url=test_url,
                    allowed_updates=None  # –í—Å–µ —Ç–∏–ø—ã
                )
                
                if result:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    import asyncio
                    await asyncio.sleep(2)
                    
                    new_webhook = await message.bot.get_webhook_info()
                    
                    if new_webhook.url == test_url:
                        logger.critical(f"!!!! –£–°–ü–ï–• –° URL {i}: {test_url} !!!!")
                        successful_urls.append((i, test_url, new_webhook))
                        
                        status = "‚úÖ **–£–°–ü–ï–•!**"
                        if new_webhook.allowed_updates is None:
                            status += " (–ø–æ–ª—É—á–∞–µ–º –í–°–ï —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)"
                        else:
                            if 'web_app_data' in new_webhook.allowed_updates:
                                status += " (web_app_data –≤–∫–ª—é—á–µ–Ω)"
                            else:
                                status += " (web_app_data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)"
                        
                        await message.answer(f"{status}\nURL {i}: —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                        
                        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ä–∞–±–æ—á–∏–π URL —Å web_app_data - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                        if (new_webhook.allowed_updates is None or 
                            'web_app_data' in (new_webhook.allowed_updates or [])):
                            break
                    else:
                        await message.answer(f"‚ùå URL {i}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥—Ä—É–≥–æ–π URL")
                else:
                    await message.answer(f"‚ùå URL {i}: –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
                    
            except Exception as url_error:
                logger.error(f"–û—à–∏–±–∫–∞ —Å URL {i} ({test_url}): {url_error}")
                await message.answer(f"‚ùå URL {i}: {str(url_error)[:100]}...")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        if successful_urls:
            final_response = f"üéâ **–ù–ê–ô–î–ï–ù–û {len(successful_urls)} —Ä–∞–±–æ—á–∏—Ö URL!**\n\n"
            
            for i, url, webhook in successful_urls:
                final_response += f"‚úÖ **URL {i}**: —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
                final_response += f"üîó `{url}`\n"
                
                if webhook.allowed_updates is None:
                    final_response += "üéØ **–ü–æ–ª—É—á–∞–µ—Ç –í–°–ï —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è web_app_data)!**\n\n"
                elif 'web_app_data' in webhook.allowed_updates:
                    final_response += "üéØ **web_app_data –≤–∫–ª—é—á–µ–Ω!**\n\n"
                else:
                    final_response += f"‚ö†Ô∏è web_app_data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: `{webhook.allowed_updates}`\n\n"
            
            await message.answer(final_response, parse_mode="Markdown")
        else:
            await message.answer("‚ùå **–ù–∏ –æ–¥–∏–Ω URL —Å www. –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª**\n\n–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –≤ –¥–æ–º–µ–Ω–µ.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ www webhook: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.message(Command("setallwebhook"))
async def cmd_set_all_webhook(message: Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –í–°–ï–• —Ç–∏–ø–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (allowed_updates=None)."""
    try:
        await message.answer("üåê **–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –í–°–ï–• —Ç–∏–ø–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...**")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL —Å —É—á–µ—Ç–æ–º CUSTOM_DOMAIN
        CUSTOM_DOMAIN = os.getenv('CUSTOM_DOMAIN')
        if CUSTOM_DOMAIN:
            WEBHOOK_HOST = f"https://{CUSTOM_DOMAIN}"
            logger.critical(f"!!!! –ò–°–ü–û–õ–¨–ó–£–ï–ú –ö–ê–°–¢–û–ú–ù–´–ô –î–û–ú–ï–ù: {CUSTOM_DOMAIN} !!!!")
        else:
            APP_NAME = os.getenv('HEROKU_APP_NAME') or os.getenv('APP_NAME') or 'splitix-bot-69642ff6c071'
            WEBHOOK_HOST = f"https://{APP_NAME}.herokuapp.com"
            logger.critical(f"!!!! –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–¢–ê–ù–î–ê–†–¢–ù–´–ô –î–û–ú–ï–ù: {APP_NAME}.herokuapp.com !!!!")
        
        WEBHOOK_PATH = f"/bot/{TELEGRAM_BOT_TOKEN}"
        WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
        
        logger.critical(f"!!!! –£–°–¢–ê–ù–û–í–ö–ê WEBHOOK –° allowed_updates=None: {WEBHOOK_URL} !!!!")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook —Å allowed_updates=None
        result = await message.bot.set_webhook(
            url=WEBHOOK_URL,
            allowed_updates=None  # –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        )
        
        logger.critical(f"!!!! –†–ï–ó–£–õ–¨–¢–ê–¢ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å None: {result} !!!!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        import asyncio
        await asyncio.sleep(2)
        
        new_webhook = await message.bot.get_webhook_info()
        logger.critical(f"!!!! –ù–û–í–´–ô WEBHOOK —Å None: {new_webhook} !!!!")
        
        response = "‚úÖ **Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π!**\n\n"
        response += f"üì° **URL**: `{new_webhook.url}`\n"
        
        if new_webhook.allowed_updates is None:
            response += "üîß **Allowed updates**: `None` (–≤—Å–µ —Ç–∏–ø—ã)\n\n"
            response += "üéâ **–£–°–ü–ï–•!** –¢–µ–ø–µ—Ä—å –±–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –≤–∫–ª—é—á–∞—è web_app_data!\n\n"
            response += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp –∫–æ–º–∞–Ω–¥–æ–π `/testwebapp`"
        else:
            response += f"üîß **Allowed updates**: `{new_webhook.allowed_updates}`\n\n"
            response += "‚ö†Ô∏è Telegram API –≤–µ—Ä–Ω—É–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–º–µ—Å—Ç–æ None."
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        error_msg = str(e)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook —Å None: {error_msg}")
        await message.answer(f"‚ùå **–û—à–∏–±–∫–∞**: `{error_msg}`", parse_mode="Markdown")

@router.message(Command("testcustomdomain"))
async def cmd_test_custom_domain(message: Message):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç webhook —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –¥–æ–º–µ–Ω–æ–º."""
    try:
        await message.answer("üåê **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –¥–æ–º–µ–Ω–æ–º...**")
        
        # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
        custom_domains = [
            "splitix.app",
            "splitix.ru", 
            "splitix.com",
            "split-bot.app",
            "split-bot.ru",
            "receiptbot.app",
            "checkbot.ru"
        ]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π webhook –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—É—Ç–∏
        webhook_info = await message.bot.get_webhook_info()
        current_path = f"/bot/{TELEGRAM_BOT_TOKEN}"
        
        if webhook_info.url:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ URL
            import re
            match = re.search(r'https://[^/]+(.+)', webhook_info.url)
            if match:
                current_path = match.group(1)
        
        response = "üéØ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞:**\n\n"
        response += "**–®–∞–≥ 1:** –ö—É–ø–∏—Ç–µ –¥–æ–º–µ–Ω (–æ—Ç 200‚ÇΩ/–≥–æ–¥):\n"
        
        for domain in custom_domains:
            response += f"‚Ä¢ `{domain}` - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å\n"
        
        response += "\n**–®–∞–≥ 2:** –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤ Heroku:\n"
        response += "```\n"
        response += "heroku domains:add yourdomain.com -a splitix-bot-69642ff6c071\n"
        response += "heroku certs:auto:enable -a splitix-bot-69642ff6c071\n"
        response += "```\n\n"
        
        response += "**–®–∞–≥ 3:** –ù–∞—Å—Ç—Ä–æ–π—Ç–µ DNS:\n"
        response += "‚Ä¢ –¢–∏–ø: `CNAME`\n"
        response += "‚Ä¢ –ò–º—è: `@` (–∏–ª–∏ `www`)\n"
        response += "‚Ä¢ –ó–Ω–∞—á–µ–Ω–∏–µ: `splitix-bot-69642ff6c071.herokuapp.com`\n\n"
        
        response += "**–®–∞–≥ 4:** –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ:\n"
        response += f"‚Ä¢ URL: `https://yourdomain.com{current_path}`\n\n"
        
        response += "**üí° –•–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–æ–º–µ–Ω–æ–º?**\n"
        response += "–ù–∞–ø–∏—à–∏—Ç–µ: `/testdomainurl https://yourdomain.com`"
        
        await message.answer(response, parse_mode="Markdown")
        
        # –¢–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        current_info = f"\nüîç **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
        current_info += f"URL: `{webhook_info.url}`\n"
        current_info += f"–ü—É—Ç—å: `{current_path}`\n"
        current_info += f"Allowed updates: `{webhook_info.allowed_updates}`\n"
        
        await message.answer(current_info, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.message(Command("testdomainurl"))
async def cmd_test_domain_url(message: Message):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π URL –¥–æ–º–µ–Ω–∞ –¥–ª—è webhook."""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.answer(
                "‚ùì **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
                "`/testdomainurl https://yourdomain.com`\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "`/testdomainurl https://splitix.app`",
                parse_mode="Markdown"
            )
            return
        
        domain_url = args[1].strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç URL
        if not domain_url.startswith('http'):
            domain_url = f"https://{domain_url}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π webhook URL
        webhook_path = f"/bot/{TELEGRAM_BOT_TOKEN}"
        full_webhook_url = f"{domain_url.rstrip('/')}{webhook_path}"
        
        await message.answer(f"üß™ **–¢–µ—Å—Ç–∏—Ä—É—é –¥–æ–º–µ–Ω:** `{domain_url}`")
        logger.critical(f"!!!! –¢–ï–°–¢ –ö–ê–°–¢–û–ú–ù–û–ì–û –î–û–ú–ï–ù–ê: {full_webhook_url} !!!!")
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –¥–æ–º–µ–Ω–æ–º
            result = await message.bot.set_webhook(
                url=full_webhook_url,
                allowed_updates=None  # –í—Å–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            )
            
            if result:
                await message.answer("‚è≥ **–ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...**")
                
                # –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
                import asyncio
                await asyncio.sleep(3)
                
                new_webhook = await message.bot.get_webhook_info()
                logger.critical(f"!!!! –†–ï–ó–£–õ–¨–¢–ê–¢ –ö–ê–°–¢–û–ú–ù–û–ì–û –î–û–ú–ï–ù–ê: {new_webhook} !!!!")
                
                if new_webhook.url == full_webhook_url:
                    response = "üéâ **–£–°–ü–ï–•! –ö–∞—Å—Ç–æ–º–Ω—ã–π –¥–æ–º–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç!**\n\n"
                    response += f"üì° **URL:** `{new_webhook.url}`\n"
                    
                    if new_webhook.allowed_updates is None:
                        response += "üéØ **Allowed updates:** `None` (–í–°–ï —Ç–∏–ø—ã –≤–∫–ª—é—á–µ–Ω—ã!)\n\n"
                        response += "‚úÖ **web_app_data –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å!**"
                    elif 'web_app_data' in new_webhook.allowed_updates:
                        response += "üéØ **web_app_data:** ‚úÖ –í–∫–ª—é—á–µ–Ω!\n\n"
                        response += "‚úÖ **WebApp –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å!**"
                    else:
                        response += f"‚ö†Ô∏è **Allowed updates:** `{new_webhook.allowed_updates}`\n\n"
                        response += "‚ùå web_app_data –≤—Å–µ –µ—â–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                    
                    response += "\n\nüß™ **–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ WebApp:** `/testwebapp`"
                    
                    await message.answer(response, parse_mode="Markdown")
                else:
                    await message.answer(
                        f"‚ùå **Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**\n"
                        f"–û–∂–∏–¥–∞–ª—Å—è: `{full_webhook_url}`\n"
                        f"–ü–æ–ª—É—á–µ–Ω: `{new_webhook.url}`",
                        parse_mode="Markdown"
                    )
            else:
                await message.answer("‚ùå **–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook**")
                
        except Exception as webhook_error:
            error_msg = str(webhook_error)
            logger.error(f"–û—à–∏–±–∫–∞ webhook —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –¥–æ–º–µ–Ω–æ–º: {error_msg}")
            
            if "failed to resolve host" in error_msg.lower():
                await message.answer(
                    "‚ùå **DNS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω**\n\n"
                    "üîß **–ù–∞—Å—Ç—Ä–æ–π—Ç–µ DNS –∑–∞–ø–∏—Å–∏:**\n"
                    f"‚Ä¢ –¢–∏–ø: CNAME\n"
                    f"‚Ä¢ –ò–º—è: @ (–∏–ª–∏ www)\n"
                    f"‚Ä¢ –ó–Ω–∞—á–µ–Ω–∏–µ: splitix-bot-69642ff6c071.herokuapp.com\n\n"
                    f"‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5-15 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DNS"
                )
            elif "flood control" in error_msg.lower():
                await message.answer(
                    "üö´ **Flood control –∞–∫—Ç–∏–≤–µ–Ω**\n\n"
                    "‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π"
                )
            else:
                await message.answer(f"‚ùå **–û—à–∏–±–∫–∞:** `{error_msg}`", parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ URL –¥–æ–º–µ–Ω–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.message(Command("chatgpttest"))
async def cmd_chatgpt_test(message: Message):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–µ–æ—Ä–∏—é ChatGPT: web_app_data –ù–ï –Ω—É–∂–µ–Ω –≤ allowed_updates."""
    try:
        await message.answer("üß† **ChatGPT —Ç–µ–æ—Ä–∏—è**: web_app_data –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏ –æ–±—ã—á–Ω–æ–≥–æ 'message'")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π webhook
        webhook_info = await message.bot.get_webhook_info()
        
        response = "üîç **–¢–µ–∫—É—â–∏–π webhook:**\n"
        response += f"URL: `{webhook_info.url}`\n"
        response += f"Allowed updates: `{webhook_info.allowed_updates}`\n\n"
        
        # –ü–æ —Ç–µ–æ—Ä–∏–∏ ChatGPT: —É–±–∏—Ä–∞–µ–º web_app_data, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ message
        logger.critical("!!!! CHATGPT –¢–ï–°–¢: –£–ë–ò–†–ê–ï–ú web_app_data –ò–ó allowed_updates !!!!")
        
        result = await message.bot.set_webhook(
            url=webhook_info.url,
            allowed_updates=["message", "callback_query", "inline_query", "chosen_inline_result"]
            # –£–ë–†–ê–õ–ò "web_app_data" - –ø–æ —Ç–µ–æ—Ä–∏–∏ ChatGPT –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω!
        )
        
        if result:
            await message.answer("‚è≥ **–ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...**")
            
            import asyncio
            await asyncio.sleep(2)
            
            new_webhook = await message.bot.get_webhook_info()
            logger.critical(f"!!!! –†–ï–ó–£–õ–¨–¢–ê–¢ –ë–ï–ó web_app_data: {new_webhook} !!!!")
            
            final_response = "üéØ **–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ ChatGPT:**\n\n"
            final_response += f"üì° URL: `{new_webhook.url}`\n"
            final_response += f"üîß Allowed updates: `{new_webhook.allowed_updates}`\n\n"
            
            if 'web_app_data' in (new_webhook.allowed_updates or []):
                final_response += "‚ùå **web_app_data –≤—Å–µ –µ—â–µ –µ—Å—Ç—å** (Telegram –¥–æ–±–∞–≤–∏–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)\n\n"
            else:
                final_response += "‚úÖ **web_app_data –ù–ï–¢ –≤ —Å–ø–∏—Å–∫–µ** (–∫–∞–∫ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ ChatGPT)\n\n"
            
            final_response += "üß™ **–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ WebApp:** `/testwebapp`\n\n"
            final_response += "üí° **–¢–µ–æ—Ä–∏—è:** –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–µ–º web_app_data"
            
            await message.answer(final_response, parse_mode="Markdown")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ChatGPT —Ç–µ—Å—Ç–µ: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}") 