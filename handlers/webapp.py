import json
import logging
from aiogram import Router, F
from aiogram.types import Message, Update, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from handlers.photo import ReceiptStates
from handlers.callbacks import handle_confirm_selection
from decimal import Decimal

logger = logging.getLogger(__name__)
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è –Ω–∞ DEBUG
logger.setLevel(logging.DEBUG)
router = Router()

# –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ main.py
message_states = {}

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def handle_all_messages(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –æ—Ç–ª–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp"""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ web_app_data
    if hasattr(message, 'web_app_data') and message.web_app_data:
        logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ WebApp: {message.web_app_data.data}")
        await handle_webapp_data(message, state)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è
    attrs = dir(message)
    logger.debug(f"–ê—Ç—Ä–∏–±—É—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è: {', '.join([a for a in attrs if not a.startswith('_')])}")
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    logger.debug(f"Text: {getattr(message, 'text', 'None')}")
    logger.debug(f"ContentType: {getattr(message, 'content_type', 'None')}")
    logger.debug(f"WebAppData: {getattr(message, 'web_app_data', 'None')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ JSON-–¥–∞–Ω–Ω—ã–µ
    if hasattr(message, 'text') and message.text:
        try:
            data = json.loads(message.text)
            if isinstance(data, dict) and 'messageId' in data and 'selectedItems' in data:
                logger.info(f"–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ WebApp –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text}")
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                class WebAppData:
                    def __init__(self, data):
                        self.data = json.dumps(data)
                message.web_app_data = WebAppData(data)
                await handle_webapp_data(message, state)
                return
        except json.JSONDecodeError:
            pass
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–ø–æ–∑–Ω–∞–Ω–æ –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ WebApp, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")

@router.message(F.web_app_data)
async def handle_webapp_data(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if not hasattr(message, 'web_app_data') or not message.web_app_data:
            logger.warning("WebApp –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        webapp_data = message.web_app_data.data
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {webapp_data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ
        if not webapp_data:
            logger.warning("WebApp –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ")
            await message.answer("‚ùå –ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        # –ü–∞—Ä—Å–∏–º JSON-–¥–∞–Ω–Ω—ã–µ
        data = json.loads(webapp_data)
        logger.debug(f"–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
        
        message_id = data.get('messageId')
        selected_items = data.get('selectedItems', {})
        
        logger.debug(f"message_id: {message_id}, —Ç–∏–ø: {type(message_id)}")
        logger.debug(f"selected_items: {selected_items}, —Ç–∏–ø: {type(selected_items)}")
        logger.debug(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ message_states: {list(message_states.keys())}")
        
        if not message_id:
            logger.warning("messageId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return
        
        if message_id not in message_states:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∫–ª—é—á–∏ message_states –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            logger.debug(f"message_id {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–ª—é—á –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—é")
            str_keys = {str(k): k for k in message_states.keys()}
            logger.debug(f"–°—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–ª—é—á–∏ message_states: {str_keys}")
            
            if str(message_id) in str_keys:
                actual_key = str_keys[str(message_id)]
                logger.debug(f"–ù–∞–π–¥–µ–Ω –∫–ª—é—á {actual_key} –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—é {message_id}")
                message_id = actual_key
            else:
                logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è message_id: {message_id}")
                logger.warning(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: {list(message_states.keys())}")
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        message_data = message_states[message_id]
        logger.debug(f"–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è message_id {message_id}: {message_data.keys()}")
        
        # –ü–æ–ª—É—á–∞–µ–º user_id
        user_id = message.from_user.id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if 'user_selections' not in message_data:
            message_data['user_selections'] = {}
        
        user_selections = message_data['user_selections']
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–ª—é—á–∏ –≤ —á–∏—Å–ª–∞ –∏ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–∂–µ —á–∏—Å–ª–∞
        user_selections[user_id] = {int(idx): int(count) for idx, count in selected_items.items()}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–∞–º–∏
        user_mention = f"@{message.from_user.username}" if message.from_user.username else f"{message.from_user.first_name}"
        summary = f"<b>‚úÖ {user_mention}, –≤–∞—à –≤—ã–±–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
        summary += f"<b>üìã –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:</b>\n"
        
        items = message_data.get("items", [])
        service_charge_percent = message_data.get("service_charge_percent")
        actual_discount_percent = message_data.get("actual_discount_percent")
        total_discount_amount = message_data.get("total_discount_amount")
        
        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—É–º–º—ã –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –≤ —á–µ–∫–µ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏
        total_check_sum = Decimal("0.00")
        for item in items:
            if item.get("total_amount_from_openai") is not None:
                total_check_sum += Decimal(str(item["total_amount_from_openai"]))
        
        # –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        total_sum = Decimal("0.00")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Å—á–∏—Ç–∞–µ–º —Å—É–º–º—É
        for idx_str, count in selected_items.items():
            if count > 0:
                idx = int(idx_str)
                if idx >= len(items):
                    continue
                    
                item = items[idx]
                description = item.get("description", "N/A")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–≤–∞—Ä –≤–µ—Å–æ–≤—ã–º
                is_weight_item = False
                openai_quantity = item.get("quantity_from_openai", 1)
                total_amount_openai = item.get("total_amount_from_openai")
                unit_price_openai = item.get("unit_price_from_openai")
                
                if openai_quantity == 1 and total_amount_openai is not None and unit_price_openai is not None:
                    price_diff = abs(Decimal(str(total_amount_openai)) - Decimal(str(unit_price_openai)))
                    is_weight_item = price_diff > Decimal("0.01")
                
                # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                if is_weight_item and total_amount_openai is not None:
                    item_total = Decimal(str(total_amount_openai))
                elif unit_price_openai is not None:
                    item_total = Decimal(str(unit_price_openai)) * Decimal(count)
                elif total_amount_openai is not None and openai_quantity > 0:
                    try:
                        unit_price = Decimal(str(total_amount_openai)) / Decimal(str(openai_quantity))
                        item_total = unit_price * Decimal(count)
                    except Exception:
                        item_total = Decimal(str(total_amount_openai))
                else:
                    continue
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å
                discount_info = ""
                if item.get("discount_percent") is not None:
                    discount_amount = (item_total * Decimal(str(item["discount_percent"])) / Decimal("100")).quantize(Decimal("0.01"))
                    item_total -= discount_amount
                    discount_info = f" (—Å–∫–∏–¥–∫–∞ {item['discount_percent']}%)"
                elif item.get("discount_amount") is not None:
                    if openai_quantity > 0:
                        item_discount = (Decimal(str(item["discount_amount"])) * Decimal(count) / Decimal(str(openai_quantity))).quantize(Decimal("0.01"))
                        item_total -= item_discount
                        discount_info = f" (—Å–∫–∏–¥–∫–∞ {item_discount:.2f})"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –∏—Ç–æ–≥
                total_sum += item_total
                summary += f"- {description}: {count} —à—Ç. = {item_total:.2f}{discount_info}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–Ω–æ–º —Å–±–æ—Ä–µ
        if service_charge_percent is not None:
            service_amount = (total_sum * Decimal(str(service_charge_percent)) / Decimal("100")).quantize(Decimal("0.01"))
            total_sum += service_amount
            summary += f"\n<b>–ü–ª–∞—Ç–∞ –∑–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ ({service_charge_percent}%): {service_amount:.2f}</b>"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—â–µ–π —Å–∫–∏–¥–∫–µ
        if actual_discount_percent is not None and actual_discount_percent > 0:
            discount_amount = (total_sum * Decimal(str(actual_discount_percent)) / Decimal("100")).quantize(Decimal("0.01"))
            total_sum -= discount_amount
            summary += f"\n<b>–°–∫–∏–¥–∫–∞ ({actual_discount_percent}%): -{discount_amount:.2f}</b>"
        elif total_discount_amount is not None and total_check_sum > 0:
            user_discount = (Decimal(str(total_discount_amount)) * total_sum / total_check_sum).quantize(Decimal("0.01"))
            total_sum -= user_discount
            summary += f"\n<b>–°–∫–∏–¥–∫–∞: -{user_discount:.2f}</b>"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
        summary += f"\n\n<b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total_sum:.2f}</b>"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if "user_results" not in message_data:
            message_data["user_results"] = {}
        
        message_data["user_results"][user_id] = {
            "summary": summary,
            "total_sum": float(total_sum),
            "selected_items": {str(idx): count for idx, count in selected_items.items() if count > 0}
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
        await message.answer(summary, parse_mode="HTML")
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        keyboard = InlineKeyboardBuilder()
        keyboard.row(InlineKeyboardButton(text="üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ç–æ–≥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="show_all_results"))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        await message.answer(
            "‚úÖ –í–∞—à –≤—ã–±–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–π –≤—ã–±–æ—Ä –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ.",
            reply_markup=keyboard.as_markup()
        )
        
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.") 