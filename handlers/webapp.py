import json
import logging
from aiogram import Router, F, Bot
from aiogram.types import Message, InlineQueryResultArticle, InputTextMessageContent

logger = logging.getLogger(__name__)
if not logger.handlers:
    handler = logging.StreamHandler()
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    handler.setFormatter(formatter)
    logger.addHandler(handler)
logger.setLevel(logging.DEBUG)
logger.propagate = False

router = Router()

@router.message(F.web_app_data)
async def handle_webapp_data_specific_filter(message: Message):
    logger.critical("!!!! DEBUG_WEBAPP_ROUTER: handle_webapp_data_specific_filter (F.web_app_data) TRIGGERED !!!!")
    if message.web_app_data and message.web_app_data.data:
        logger.critical(f"!!!! DEBUG_WEBAPP_ROUTER: WebApp Data Received: {message.web_app_data.data} !!!!")
        logger.critical(f"Full message object: {message.model_dump_json(indent=2)}")
        
        raw_data = message.web_app_data.data
        logger.critical(f"!!!! RAW DATA: '{raw_data}' !!!!")
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ = "–ü—Ä–∏–≤–µ—Ç", —ç—Ç–æ –Ω–∞—à –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
        if raw_data.strip() == "–ü—Ä–∏–≤–µ—Ç":
            logger.critical(f"!!!! –£–°–ü–ï–•! –ü–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{raw_data}' !!!!")
            await message.answer(f"üéâ –£–°–ü–ï–•! –ë–æ—Ç –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç WebApp: '{raw_data}'")
            return
        
        # –ò–Ω–∞—á–µ –ø—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON (–¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤)
        query_id = None
        try:
            data = json.loads(raw_data)
            query_id = data.get('query_id') 
            logger.info(f"Parsed web_app_data: {data}")

            if query_id:
                logger.info(f"Attempting to answer WebApp query_id: {query_id}")
                await message.bot.answer_web_app_query(
                    web_app_query_id=query_id,
                    result=InlineQueryResultArticle(
                        id=str(query_id), 
                        title="–ü–æ–ª—É—á–µ–Ω–æ –±–æ—Ç–æ–º (F.web_app_data)",
                        input_message_content=InputTextMessageContent(message_text="DEBUG: –ë–æ—Ç –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp (F.web_app_data).")
                    )
                )
                logger.info(f"Successfully called answer_web_app_query for query_id: {query_id}")
                await message.answer(f"DEBUG: –î–∞–Ω–Ω—ã–µ WebApp (c query_id={query_id}) –ø–æ–ª—É—á–µ–Ω—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–º F.web_app_data.")
            else:
                logger.warning("!!!! DEBUG_WEBAPP_ROUTER: query_id not found in web_app_data. Cannot call answer_web_app_query. !!!!")
                await message.answer("DEBUG: –î–∞–Ω–Ω—ã–µ WebApp –ø–æ–ª—É—á–µ–Ω—ã (F.web_app_data, query_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç).")
                
        except json.JSONDecodeError:
            logger.error(f"!!!! DEBUG_WEBAPP_ROUTER: JSONDecodeError parsing message.web_app_data.data: '{raw_data}' !!!!")
            await message.answer(f"DEBUG: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp (–Ω–µ JSON): '{raw_data}'")
        except Exception as e:
            logger.error(f"!!!! DEBUG_WEBAPP_ROUTER: Unexpected error processing web_app_data: {e} !!!!", exc_info=True)
            await message.answer("DEBUG: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ/–æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp (F.web_app_data).")
            
    else:
        # –≠—Ç–∞ –≤–µ—Ç–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å—Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ F.web_app_data —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ, 
        # —Ç–∞–∫ –∫–∞–∫ —Å–∞–º —Ñ–∏–ª—å—Ç—Ä —É–∂–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ message.web_app_data
        logger.error("!!!! DEBUG_WEBAPP_ROUTER: F.web_app_data triggered, but web_app_data or data is missing (SHOULD NOT HAPPEN) !!!!")

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ webapp —Ä–æ—É—Ç–µ—Ä–µ
@router.message()
async def handle_all_messages_webapp_router(message: Message):
    logger.critical(f"!!!! WEBAPP_ROUTER: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ù–ï F.web_app_data) !!!! content_type: {message.content_type}")
    logger.critical(f"!!!! WEBAPP_ROUTER: –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {message.model_dump_json(indent=2)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ web_app_data –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ (—Ö–æ—Ç—è —Ñ–∏–ª—å—Ç—Ä –µ–≥–æ –Ω–µ –ø–æ–π–º–∞–ª)
    if hasattr(message, 'web_app_data') and message.web_app_data:
        logger.critical(f"!!!! WEBAPP_ROUTER: –ù–ê–ô–î–ï–ù–û web_app_data –≤ fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ !!!! data: {message.web_app_data.data}")
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await handle_webapp_data_specific_filter(message)
    else:
        logger.critical(f"!!!! WEBAPP_ROUTER: web_app_data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ !!!!") 