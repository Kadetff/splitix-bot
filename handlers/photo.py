import logging
import aiohttp
from decimal import Decimal
from aiogram import F, Router
from aiogram.types import Message
from aiogram.enums import ChatType
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services.openai_service import process_receipt_with_openai
from utils.keyboards import create_receipt_keyboard
from utils.api import check_api_health, prepare_data_for_api
from utils.formatters import format_item_line, calculate_totals
from typing import Dict, Any
from config.settings import WEBAPP_URL

logger = logging.getLogger(__name__)
router = Router()

class ReceiptStates(StatesGroup):
    waiting_for_photo = State()
    waiting_for_items_selection = State()

# –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ main.py
message_states: Dict[int, Dict[str, Any]] = {}

async def save_receipt_data_to_api(message_id: int, data: Dict[str, Any]) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞ –≤ API –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    if not WEBAPP_URL or "http://localhost" in WEBAPP_URL or "http://127.0.0.1" in WEBAPP_URL:
        logger.warning("WEBAPP_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç localhost")
        return False
    
    clean_url = WEBAPP_URL.strip('"\'')
    timeout = aiohttp.ClientTimeout(total=5.0)
    
    try:
        async with aiohttp.ClientSession(timeout=timeout) as session:
            if not await check_api_health(session, clean_url):
                return False
            
            api_url = f"{clean_url}/api/receipt/{message_id}"
            serializable_data = prepare_data_for_api(data)
            
            async with session.post(api_url, json=serializable_data) as response:
                if response.status == 200:
                    logger.info(f"–î–∞–Ω–Ω—ã–µ —á–µ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è message_id: {message_id}")
                    return True
                error_text = await response.text()
                logger.error(f"–û—à–∏–±–∫–∞ API: {response.status}, {error_text}")
                return False
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        return False

async def process_receipt_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ —á–µ–∫–∞"""
    try:
        photo = message.photo[-1]
        file = await message.bot.get_file(photo.file_id)
        file_bytes = await message.bot.download_file(file.file_path)
        image_data = file_bytes.read()
        
        processing_message = await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–µ–∫...")
        
        items, service_charge, total_check_amount, total_discount_percent, total_discount_amount = await process_receipt_with_openai(image_data)
        
        if not items:
            await processing_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ.")
            await state.clear()
            return
        
        calculated_total, service_charge_amount, actual_discount_percent = calculate_totals(
            items, service_charge, total_discount_amount
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response_msg_text = "<b>üìã –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —á–µ–∫–∞:</b>\n\n"
        response_msg_text += "".join(format_item_line(item) for item in items)
        
        response_msg_text += "\n<b>üìä –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
        
        if total_discount_amount is not None:
            response_msg_text += f"üéâ –°–∫–∏–¥–∫–∞: {actual_discount_percent}% (-{total_discount_amount:.2f})\n"
        
        if service_charge is not None:
            response_msg_text += f"üí∞ –°–µ—Ä–≤–∏—Å–Ω—ã–π —Å–±–æ—Ä: {service_charge}% (+{service_charge_amount:.2f})\n"
        
        if total_check_amount is not None:
            if abs(calculated_total - total_check_amount) < Decimal("0.01"):
                response_msg_text += f"‚úÖ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total_check_amount:.2f} (—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ä–∞—Å—á–µ—Ç–æ–º)\n"
            else:
                response_msg_text += f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —Å—É–º–º–∞ –≤ —á–µ–∫–µ ({total_check_amount:.2f}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ä–∞—Å—á–µ—Ç–æ–º ({calculated_total:.2f})\n"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        receipt_data = {
            "items": items,
            "user_selections": {},
            "service_charge_percent": service_charge,
            "total_check_amount": total_check_amount,
            "total_discount_percent": total_discount_percent,
            "total_discount_amount": total_discount_amount,
            "actual_discount_percent": actual_discount_percent,
        }
        
        message_states[processing_message.message_id] = receipt_data
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ API
        await save_receipt_data_to_api(processing_message.message_id, receipt_data)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = create_receipt_keyboard(
            processing_message.message_id,
            message.chat.type
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await processing_message.edit_text(
            response_msg_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await state.set_state(ReceiptStates.waiting_for_items_selection)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.message(F.photo)
async def handle_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ"""
    current_state = await state.get_state()
    
    # –í –ª–∏—á–Ω–æ–º —á–∞—Ç–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ —Å—Ä–∞–∑—É
    if message.chat.type == ChatType.PRIVATE:
        await process_receipt_photo(message, state)
    # –í –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /split
    elif current_state == ReceiptStates.waiting_for_photo:
        await process_receipt_photo(message, state)