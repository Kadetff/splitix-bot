import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ChatType
from uuid import uuid4
from config.settings import WEBAPP_URL, BOT_USERNAME
from utils.logging import log_event

logger = logging.getLogger(__name__)
router = Router()

@router.inline_query()
async def process_inline_query(query: InlineQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–æ–≤."""
    start_time = datetime.utcnow()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞
        bot_username = BOT_USERNAME
        if not bot_username:
            bot_info = await query.bot.get_me()
            bot_username = bot_info.username
            if not bot_username:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –±–æ—Ç–∞")
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        split_id = str(uuid4())
        webapp_id = str(uuid4())
        help_id = str(uuid4())
        about_id = str(uuid4())
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        is_private = query.chat_type == ChatType.PRIVATE
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        results = [
            InlineQueryResultArticle(
                id=split_id,
                title="üì∑ –†–∞–∑–¥–µ–ª–∏—Ç—å —á–µ–∫",
                description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ–∫–∞",
                input_message_content=InputTextMessageContent(
                    message_text="/split"
                ),
                thumbnail_url="https://img.icons8.com/color/48/000000/split-files.png"
            ),
            InlineQueryResultArticle(
                id=webapp_id,
                title="üåê –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                description="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–æ—Å—Ç—É–ø—É –∫ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é Telegram",
                input_message_content=InputTextMessageContent(
                    message_text=f"*–°–ø–ª–∏—Ç–ß–µ–∫* - –î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ [–ª–∏—á–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º](https://t.me/{bot_username}) –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /webapp\n\n" +
                    "‚ö†Ô∏è –ò–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö.",
                    parse_mode="Markdown"
                ),
                thumbnail_url="https://img.icons8.com/color/48/000000/web.png"
            ),
            InlineQueryResultArticle(
                id=help_id,
                title="‚ùì –ü–æ–º–æ—â—å",
                description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞",
                input_message_content=InputTextMessageContent(
                    message_text="/help"
                ),
                thumbnail_url="https://img.icons8.com/color/48/000000/help.png"
            ),
            InlineQueryResultArticle(
                id=about_id,
                title="‚ÑπÔ∏è –û –±–æ—Ç–µ",
                description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —á–µ–∫–æ–≤",
                input_message_content=InputTextMessageContent(
                    message_text="*–ë–æ—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —á–µ–∫–æ–≤*\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞, –∏ —è –ø–æ–º–æ–≥—É —Ä–∞–∑–¥–µ–ª–∏—Ç—å –µ–≥–æ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.\n\n"
                    "–î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /split –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.",
                    parse_mode="Markdown"
                ),
                thumbnail_url="https://img.icons8.com/color/48/000000/info.png"
            )
        ]
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–∞–∫–æ–π-—Ç–æ –∑–∞–ø—Ä–æ—Å, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
        if query.query:
            search_id = str(uuid4())
            results.append(
                InlineQueryResultArticle(
                    id=search_id,
                    title=f"üîç –ü–æ–∏—Å–∫: {query.query}",
                    description="–°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ç–∏–º —Ç–µ–∫—Å—Ç–æ–º",
                    input_message_content=InputTextMessageContent(
                        message_text=f"*–†–∞–∑–¥–µ–ª–∏—Ç—å —á–µ–∫*: {query.query}",
                        parse_mode="Markdown"
                    )
                )
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await query.answer(results, cache_time=300)  # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        elapsed_ms = (datetime.utcnow() - start_time).total_seconds() * 1000
        log_event(
            event_type="inline_query",
            user_id=query.from_user.id,
            chat_type=query.chat_type if query.chat_type else "private",
            query=query.query,
            elapsed_ms=elapsed_ms
        )
        
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        elapsed_ms = (datetime.utcnow() - start_time).total_seconds() * 1000
        log_event(
            event_type="inline_query_error",
            user_id=query.from_user.id,
            chat_type=query.chat_type if query.chat_type else "private",
            query=query.query,
            error=str(e),
            elapsed_ms=elapsed_ms,
            level="error"
        )
        
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        basic_results = [
            InlineQueryResultArticle(
                id=str(uuid4()),
                title="üì∑ –†–∞–∑–¥–µ–ª–∏—Ç—å —á–µ–∫",
                description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ–∫–∞",
                input_message_content=InputTextMessageContent(
                    message_text="/split"
                )
            )
        ]
        try:
            await query.answer(basic_results, cache_time=5)
        except Exception as e2:
            log_event(
                event_type="inline_query_critical_error",
                user_id=query.from_user.id,
                chat_type=query.chat_type if query.chat_type else "private",
                query=query.query,
                error=f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–∞–∑–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {str(e2)}",
                elapsed_ms=elapsed_ms,
                level="critical"
            ) 